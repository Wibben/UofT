
W:/ECE243/Lab3/Part4/part4.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
/* Program that converts a binary number to decimal */
           .text               		// executable code follows
           .global _start
_start:
            MOV     R4, #N
   0:	e3a0405c 	mov	r4, #92	; 0x5c
            ADD     R5, R4, #4	 	// R5 points to the decimal digits storage location
   4:	e2845004 	add	r5, r4, #4
            LDR     R4, [R4]     	// R4 holds N
   8:	e5944000 	ldr	r4, [r4]
            MOV 	R0, R4       	// dividend for DIVIDE goes in R0
   c:	e1a00004 	mov	r0, r4
            MOV		R1, #1000		// Get the thousands digit
  10:	e3a01ffa 	mov	r1, #1000	; 0x3e8
			BL      DIVIDE
  14:	eb000008 	bl	3c <DIVIDE>
            STRB    R1, [R5, #3] 	// Store the thousands digit
  18:	e5c51003 	strb	r1, [r5, #3]
			MOV		R1, #100		// Get the hundreds digit
  1c:	e3a01064 	mov	r1, #100	; 0x64
			BL      DIVIDE
  20:	eb000005 	bl	3c <DIVIDE>
            STRB    R1, [R5, #2] 	// Store the hundreds digit
  24:	e5c51002 	strb	r1, [r5, #2]
			MOV		R1, #10			// Get the tens digit
  28:	e3a0100a 	mov	r1, #10
			BL      DIVIDE
  2c:	eb000002 	bl	3c <DIVIDE>
            STRB    R1, [R5, #1] 	// Store the tens digit
  30:	e5c51001 	strb	r1, [r5, #1]
            STRB    R0, [R5]     	// Ones digit is in R0 (remainder)
  34:	e5c50000 	strb	r0, [r5]

00000038 <END>:
END:        B       END
  38:	eafffffe 	b	38 <END>

0000003c <DIVIDE>:

/* Subroutine to perform the integer division R0 / R1.
 * Parameters: dividend in R0, divisor in R1
 * Returns: quotient in R1, and remainder in R0
*/
DIVIDE:     MOV     R2, #0
  3c:	e3a02000 	mov	r2, #0

00000040 <CONT>:
CONT:       CMP     R0, R1
  40:	e1500001 	cmp	r0, r1
            BLT     DIV_END
  44:	ba000002 	blt	54 <DIV_END>
            SUB     R0, R1
  48:	e0400001 	sub	r0, r0, r1
            ADD     R2, #1
  4c:	e2822001 	add	r2, r2, #1
            B       CONT
  50:	eafffffa 	b	40 <CONT>

00000054 <DIV_END>:
DIV_END:    MOV     R1, R2     		// quotient in R1 (remainder in R0)
  54:	e1a01002 	mov	r1, r2
            MOV     PC, LR
  58:	e1a0f00e 	mov	pc, lr

0000005c <N>:
  5c:	00002694 	.word	0x00002694

00000060 <Digits>:
  60:	00000000 	.word	0x00000000
