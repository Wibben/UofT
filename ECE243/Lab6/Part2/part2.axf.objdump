
W:/ECE243/Lab6/Part2/part2.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	ea00000e 	b	40 <__cs3_region_init_ram>
   4:	ea00007f 	b	208 <SERVICE_UND>
   8:	ea00007f 	b	20c <SERVICE_SVC>
   c:	ea000080 	b	214 <SERVICE_ABT_INST>
  10:	ea00007e 	b	210 <SERVICE_ABT_DATA>
  14:	00000000 	.word	0x00000000
  18:	ea000023 	b	ac <SERVICE_IRQ>
  1c:	ea00007d 	b	218 <SERVICE_FIQ>

Disassembly of section .text:

00000040 <__cs3_region_start_ram>:
				B       SERVICE_FIQ			// FIQ interrupt vector
				.text
				.global _start                        
_start:                                         
/* Set up stack pointers for IRQ and SVC processor modes */
                MOV     R1, #0b11010010		// interrupts masked, MODE = IRQ
  40:	e3a010d2 	mov	r1, #210	; 0xd2
				MSR		CPSR_c, R1			// change to IRQ mode
  44:	e121f001 	msr	CPSR_c, r1
				LDR		SP, =0xFFFFFFFF - 3	// set IRQ stack to A9 onchip memory
  48:	e3e0d003 	mvn	sp, #3

				MOV     R1, #0b11010011		// interrupts masked, MODE = SVC
  4c:	e3a010d3 	mov	r1, #211	; 0xd3
				MSR     CPSR, R1			// change to supervisor mode
  50:	e129f001 	msr	CPSR_fc, r1
				LDR		SP, =0x3FFFFFFF - 3	// set SVC stack to top of DDR3 memory
  54:	e3e0d10f 	mvn	sp, #-1073741821	; 0xc0000003

                BL      CONFIG_GIC       	// configure the ARM generic interrupt controller
  58:	eb000041 	bl	164 <CONFIG_GIC>
                BL      CONFIG_TIMER     	// configure the Interval Timer
  5c:	eb000006 	bl	7c <CONFIG_TIMER>
                BL      CONFIG_KEYS      	// configure the pushbutton KEYs port
  60:	eb00000d 	bl	9c <CONFIG_KEYS>

/* Enable IRQ interrupts in the ARM processor */
                MOV      R0, #0b01010011	// IRQ unmasked, MODE = SVC
  64:	e3a00053 	mov	r0, #83	; 0x53
				MSR      CPSR_c, R0
  68:	e121f000 	msr	CPSR_c, r0
				
                LDR     R5, =0xFF200000  	// LEDR base address
  6c:	e59f50d0 	ldr	r5, [pc, #208]	; 144 <RUN+0x4>

00000070 <LOOP>:
LOOP:
                LDR     R3, COUNT        	// global variable
  70:	e59f30c4 	ldr	r3, [pc, #196]	; 13c <COUNT>
                STR     R3, [R5]         	// write to the LEDR lights
  74:	e5853000 	str	r3, [r5]
                B       LOOP                
  78:	eafffffc 	b	70 <LOOP>

0000007c <CONFIG_TIMER>:

/* Configure the Interval Timer to create interrupts at 0.25 second intervals */
CONFIG_TIMER:   LDR		R0, =0xFF202000		// FPGA timer base address
  7c:	e59f00c4 	ldr	r0, [pc, #196]	; 148 <RUN+0x8>
                LDR     R1, =30784			
  80:	e59f10c4 	ldr	r1, [pc, #196]	; 14c <RUN+0xc>
				STR		R1, [R0, #8]		// Set lower bits of timer
  84:	e5801008 	str	r1, [r0, #8]
				LDR		R1, =381
  88:	e59f10c0 	ldr	r1, [pc, #192]	; 150 <RUN+0x10>
				STR		R1, [R0, #12]		// Set upper bits of timer
  8c:	e580100c 	str	r1, [r0, #12]
				MOV     R1, #0b0111			// Control register bits
  90:	e3a01007 	mov	r1, #7
				STR     R1, [R0, #4]		// Start timer, set auto-reload and enable interrupts
  94:	e5801004 	str	r1, [r0, #4]
                BX      LR
  98:	e12fff1e 	bx	lr

0000009c <CONFIG_KEYS>:

/* Configure the pushbutton KEYS to generate interrupts */
CONFIG_KEYS:                                    
                LDR     R0, =0xFF200050		// KEY address
  9c:	e59f00b0 	ldr	r0, [pc, #176]	; 154 <RUN+0x14>
				MOV     R1, #0xF			// set interrupt mask bits
  a0:	e3a0100f 	mov	r1, #15
				STR     R1, [R0, #0x8]		// interrupt mask register (base + 8)
  a4:	e5801008 	str	r1, [r0, #8]
                BX      LR
  a8:	e12fff1e 	bx	lr

000000ac <SERVICE_IRQ>:

/* Define the exception service routines */
SERVICE_IRQ:    PUSH    {R0-R7, LR}
  ac:	e92d40ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
				LDR     R4, =0xFFFEC100		// GIC CPU interface base address
  b0:	e59f40a0 	ldr	r4, [pc, #160]	; 158 <RUN+0x18>
				LDR     R5, [R4, #0x0C]		// read the ICCIAR in the CPU interface
  b4:	e594500c 	ldr	r5, [r4, #12]

000000b8 <FPGA_IRQ1_HANDLER>:

FPGA_IRQ1_HANDLER:
				CMP     R5, #73				// check the interrupt ID
  b8:	e3550049 	cmp	r5, #73	; 0x49
				BEQ		KEY_INTERRUPT
  bc:	0a000002 	beq	cc <KEY_INTERRUPT>
				CMP		R5, #72
  c0:	e3550048 	cmp	r5, #72	; 0x48
				BEQ		CLK_INTERRUPT
  c4:	0a000001 	beq	d0 <CLK_INTERRUPT>

000000c8 <UNEXPECTED>:

UNEXPECTED:     B     	UNEXPECTED			// if not recognized, stop here
  c8:	eafffffe 	b	c8 <UNEXPECTED>

000000cc <KEY_INTERRUPT>:
KEY_INTERRUPT:	BL      KEY_ISR
  cc:	eb00000e 	bl	10c <KEY_ISR>

000000d0 <CLK_INTERRUPT>:
CLK_INTERRUPT:	BL		TIMER_ISR
  d0:	eb000002 	bl	e0 <TIMER_ISR>

000000d4 <EXIT_IRQ>:

EXIT_IRQ:       STR     R5, [R4, #0x10]		// write to the End of Interrupt Register (ICCEOIR)
  d4:	e5845010 	str	r5, [r4, #16]
				POP     {R0-R7, LR}
  d8:	e8bd40ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
				SUBS    PC, LR, #4			// return from exception
  dc:	e25ef004 	subs	pc, lr, #4

000000e0 <TIMER_ISR>:

/* Check if it has been 0.25 seconds and adds RUN to COUNT */
TIMER_ISR:		LDR     R0, =0xFF202000		// base address of FPGA timer
  e0:	e59f0060 	ldr	r0, [pc, #96]	; 148 <RUN+0x8>
				LDR     R1, [R0]		// read edge capture register
  e4:	e5901000 	ldr	r1, [r0]
				MOV     R2, #0
  e8:	e3a02000 	mov	r2, #0
				STR     R2, [R0]			// clear the interrupt
  ec:	e5802000 	str	r2, [r0]
				LDR     R0, =RUN			// Load RUN toggle
  f0:	e59f0064 	ldr	r0, [pc, #100]	; 15c <RUN+0x1c>
				LDR		R0, [R0]
  f4:	e5900000 	ldr	r0, [r0]
				LDR		R1, =COUNT			// Load counter
  f8:	e59f1060 	ldr	r1, [pc, #96]	; 160 <RUN+0x20>
				LDR		R2, [R1]
  fc:	e5912000 	ldr	r2, [r1]
				ADD		R2, R0				// Increment counter by RUN
 100:	e0822000 	add	r2, r2, r0
				STR		R2, [R1]			// Store incremented counter
 104:	e5812000 	str	r2, [r1]

00000108 <END_TIMER_ISR>:
END_TIMER_ISR:	BX		LR					// Return
 108:	e12fff1e 	bx	lr

0000010c <KEY_ISR>:
				
/* Check if a key has been pressed and toggles RUN */
KEY_ISR:		LDR     R0, =0xFF200050		// base address of pushbutton KEY port
 10c:	e59f0040 	ldr	r0, [pc, #64]	; 154 <RUN+0x14>
				LDR     R1, [R0, #0xC]		// read edge capture register
 110:	e590100c 	ldr	r1, [r0, #12]
				MOV     R2, #0xF
 114:	e3a0200f 	mov	r2, #15
				STR     R2, [R0, #0xC]		// clear the interrupt
 118:	e580200c 	str	r2, [r0, #12]
				LDR     R0, =RUN			// Address of RUN toggle
 11c:	e59f0038 	ldr	r0, [pc, #56]	; 15c <RUN+0x1c>

00000120 <CHECK_KEYS>:

CHECK_KEYS:		MOV		R3, #0b1111
 120:	e3a0300f 	mov	r3, #15
				ORRS	R3, R1				// Check for any KEY
 124:	e1933001 	orrs	r3, r3, r1
				BEQ		END_KEY_ISR
 128:	0a000002 	beq	138 <END_KEY_ISR>
				LDR		R1, [R0]			// Get RUN from memory
 12c:	e5901000 	ldr	r1, [r0]
				EOR		R1, #1				// Toggle RUN
 130:	e2211001 	eor	r1, r1, #1
				STR		R1, [R0]			// Set RUN in memory
 134:	e5801000 	str	r1, [r0]

00000138 <END_KEY_ISR>:

END_KEY_ISR:	BX		LR					// Return
 138:	e12fff1e 	bx	lr

0000013c <COUNT>:
 13c:	00000000 	.word	0x00000000

00000140 <RUN>:
 140:	00000001 	.word	0x00000001
 144:	ff200000 	.word	0xff200000
 148:	ff202000 	.word	0xff202000
 14c:	00007840 	.word	0x00007840
 150:	0000017d 	.word	0x0000017d
 154:	ff200050 	.word	0xff200050
 158:	fffec100 	.word	0xfffec100
 15c:	00000140 	.word	0x00000140
 160:	0000013c 	.word	0x0000013c

00000164 <CONFIG_GIC>:
/* 
 * Configure the Generic Interrupt Controller (GIC)
*/
				.global	CONFIG_GIC
CONFIG_GIC:
				PUSH		{LR}
 164:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    			/* Configure the A9 Private Timer interrupt, FPGA KEYs, and FPGA Timer
				/* CONFIG_INTERRUPT (int_ID (R0), CPU_target (R1)); */
    			MOV		R0, #MPCORE_PRIV_TIMER_IRQ
 168:	e3a0001d 	mov	r0, #29
    			MOV		R1, #CPU0
 16c:	e3a01001 	mov	r1, #1
    			BL			CONFIG_INTERRUPT
 170:	eb00000d 	bl	1ac <CONFIG_INTERRUPT>
    			MOV		R0, #INTERVAL_TIMER_IRQ
 174:	e3a00048 	mov	r0, #72	; 0x48
    			MOV		R1, #CPU0
 178:	e3a01001 	mov	r1, #1
    			BL			CONFIG_INTERRUPT
 17c:	eb00000a 	bl	1ac <CONFIG_INTERRUPT>
    			MOV		R0, #KEYS_IRQ
 180:	e3a00049 	mov	r0, #73	; 0x49
    			MOV		R1, #CPU0
 184:	e3a01001 	mov	r1, #1
    			BL			CONFIG_INTERRUPT
 188:	eb000007 	bl	1ac <CONFIG_INTERRUPT>

				/* configure the GIC CPU interface */
    			LDR		R0, =0xFFFEC100		// base address of CPU interface
 18c:	e59f0060 	ldr	r0, [pc, #96]	; 1f4 <__cs3_region_init_size_ram+0x4>
    			/* Set Interrupt Priority Mask Register (ICCPMR) */
    			LDR		R1, =0xFFFF 			// enable interrupts of all priorities levels
 190:	e59f1060 	ldr	r1, [pc, #96]	; 1f8 <__cs3_region_init_size_ram+0x8>
    			STR		R1, [R0, #0x04]
 194:	e5801004 	str	r1, [r0, #4]
    			/* Set the enable bit in the CPU Interface Control Register (ICCICR). This bit
				 * allows interrupts to be forwarded to the CPU(s) */
    			MOV		R1, #1
 198:	e3a01001 	mov	r1, #1
    			STR		R1, [R0]
 19c:	e5801000 	str	r1, [r0]
    
    			/* Set the enable bit in the Distributor Control Register (ICDDCR). This bit
				 * allows the distributor to forward interrupts to the CPU interface(s) */
    			LDR		R0, =0xFFFED000
 1a0:	e59f0054 	ldr	r0, [pc, #84]	; 1fc <__cs3_region_init_size_ram+0xc>
    			STR		R1, [R0]    
 1a4:	e5801000 	str	r1, [r0]
    
    			POP     	{PC}
 1a8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000001ac <CONFIG_INTERRUPT>:
 * other registers in the GIC
 * Arguments: R0 = interrupt ID, N
 *            R1 = CPU target
*/
CONFIG_INTERRUPT:
    			PUSH		{R4-R5, LR}
 1ac:	e92d4030 	push	{r4, r5, lr}
    
    			/* Configure Interrupt Set-Enable Registers (ICDISERn). 
				 * reg_offset = (integer_div(N / 32) * 4
				 * value = 1 << (N mod 32) */
    			LSR		R4, R0, #3							// calculate reg_offset
 1b0:	e1a041a0 	lsr	r4, r0, #3
    			BIC		R4, R4, #3							// R4 = reg_offset
 1b4:	e3c44003 	bic	r4, r4, #3
				LDR		R2, =0xFFFED100
 1b8:	e59f2040 	ldr	r2, [pc, #64]	; 200 <__cs3_region_init_size_ram+0x10>
				ADD		R4, R2, R4							// R4 = address of ICDISER
 1bc:	e0824004 	add	r4, r2, r4
    
    			AND		R2, R0, #0x1F   					// N mod 32
 1c0:	e200201f 	and	r2, r0, #31
				MOV		R5, #1								// enable
 1c4:	e3a05001 	mov	r5, #1
    			LSL		R2, R5, R2							// R2 = value
 1c8:	e1a02215 	lsl	r2, r5, r2

				/* now that we have the register address (R4) and value (R2), we need to set the
				 * correct bit in the GIC register */
    			LDR		R3, [R4]								// read current register value
 1cc:	e5943000 	ldr	r3, [r4]
    			ORR		R3, R3, R2							// set the enable bit
 1d0:	e1833002 	orr	r3, r3, r2
    			STR		R3, [R4]								// store the new register value
 1d4:	e5843000 	str	r3, [r4]

    			/* Configure Interrupt Processor Targets Register (ICDIPTRn)
     			 * reg_offset = integer_div(N / 4) * 4
     			 * index = N mod 4 */
    			BIC		R4, R0, #3							// R4 = reg_offset
 1d8:	e3c04003 	bic	r4, r0, #3
				LDR		R2, =0xFFFED800
 1dc:	e59f2020 	ldr	r2, [pc, #32]	; 204 <__cs3_region_init_size_ram+0x14>
				ADD		R4, R2, R4							// R4 = word address of ICDIPTR
 1e0:	e0824004 	add	r4, r2, r4
    			AND		R2, R0, #0x3						// N mod 4
 1e4:	e2002003 	and	r2, r0, #3
				ADD		R4, R2, R4							// R4 = byte address in ICDIPTR
 1e8:	e0824004 	add	r4, r2, r4

				/* now that we have the register address (R4) and value (R2), write to (only)
				 * the appropriate byte */
				STRB		R1, [R4]
 1ec:	e5c41000 	strb	r1, [r4]
    
    			POP		{R4-R5, PC}
 1f0:	e8bd8030 	pop	{r4, r5, pc}
 1f4:	fffec100 	.word	0xfffec100
 1f8:	0000ffff 	.word	0x0000ffff
 1fc:	fffed000 	.word	0xfffed000
 200:	fffed100 	.word	0xfffed100
 204:	fffed800 	.word	0xfffed800

00000208 <SERVICE_UND>:
/* Undefined instructions */
					.global SERVICE_UND
SERVICE_UND:                                
                    B   SERVICE_UND         
 208:	eafffffe 	b	208 <SERVICE_UND>

0000020c <SERVICE_SVC>:
/* Software interrupts */
					.global SERVICE_SVC
SERVICE_SVC:                                
                    B   SERVICE_SVC         
 20c:	eafffffe 	b	20c <SERVICE_SVC>

00000210 <SERVICE_ABT_DATA>:
/* Aborted data reads */
					.global SERVICE_ABT_DATA
SERVICE_ABT_DATA:                           
                    B   SERVICE_ABT_DATA    
 210:	eafffffe 	b	210 <SERVICE_ABT_DATA>

00000214 <SERVICE_ABT_INST>:
/* Aborted instruction fetch */
					.global SERVICE_ABT_INST
SERVICE_ABT_INST:                           
                    B   SERVICE_ABT_INST   
 214:	eafffffe 	b	214 <SERVICE_ABT_INST>

00000218 <SERVICE_FIQ>:
					.global SERVICE_FIQ 
SERVICE_FIQ:                                
                    B   SERVICE_FIQ         
 218:	eafffffe 	b	218 <SERVICE_FIQ>
