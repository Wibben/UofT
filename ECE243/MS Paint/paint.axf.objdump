
W:/ECE243/MS Paint/paint.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	2c 11 00 00 30 11 00 00 34 11 00 00 38 11 00 00     ,...0...4...8...
  30:	3c 11 00 00 20 18 00 00 40 11 00 00 70 11 00 00     <... ...@...p...

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb0005b8 	bl	17bc <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00001918 	.word	0x00001918

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00001d68 	.word	0x00001d68

00000124 <__cs3_heap_start_ptr>:
     124:	000275b8 	.word	0x000275b8

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00001d70 	.word	0x00001d70
     170:	00001d73 	.word	0x00001d73
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00001d70 	.word	0x00001d70
     1bc:	00001d70 	.word	0x00001d70
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00001d70 	.word	0x00001d70
     200:	00000000 	.word	0x00000000
     204:	000018ac 	.word	0x000018ac

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	000018ac 	.word	0x000018ac
     250:	00001d74 	.word	0x00001d74
     254:	00001918 	.word	0x00001918
     258:	00000000 	.word	0x00000000

0000025c <HEX_PS2>:
bool prevLeftBtn,leftBtn; // The state of the left button

/****************************************************************************************
 * Subroutine to show a string of HEX data on the HEX displays
****************************************************************************************/
void HEX_PS2(char b1, char b2, char b3) {
     25c:	e92d0070 	push	{r4, r5, r6}
     260:	e24dd01c 	sub	sp, sp, #28
     264:	e1a04000 	mov	r4, r0
     268:	e1a06001 	mov	r6, r1
     26c:	e1a05002 	mov	r5, r2
    volatile int * HEX5_HEX4_ptr = (int *)HEX5_HEX4_BASE;

    /* SEVEN_SEGMENT_DECODE_TABLE gives the on/off settings for all segments in
     * a single 7-seg display in the DE2 Media Computer, for the hex digits 0 -
     * F */
    unsigned char seven_seg_decode_table[] = {
     270:	e30138b0 	movw	r3, #6320	; 0x18b0
     274:	e3403000 	movt	r3, #0
     278:	e28dc008 	add	r12, sp, #8
     27c:	e5930000 	ldr	r0, [r3]
     280:	e5931004 	ldr	r1, [r3, #4]
     284:	e5932008 	ldr	r2, [r3, #8]
     288:	e593300c 	ldr	r3, [r3, #12]
     28c:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
        0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07,
        0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71};
    unsigned char hex_segs[] = {0, 0, 0, 0, 0, 0, 0, 0};
     290:	e3a03000 	mov	r3, #0
     294:	e5cd3000 	strb	r3, [sp]
     298:	e5cd3001 	strb	r3, [sp, #1]
     29c:	e5cd3002 	strb	r3, [sp, #2]
     2a0:	e5cd3003 	strb	r3, [sp, #3]
     2a4:	e5cd3004 	strb	r3, [sp, #4]
     2a8:	e5cd3005 	strb	r3, [sp, #5]
     2ac:	e5cd3006 	strb	r3, [sp, #6]
     2b0:	e5cd3007 	strb	r3, [sp, #7]
    unsigned int  shift_buffer, nibble;
    unsigned char code;
    int           i;

    shift_buffer = (b1 << 16) | (b2 << 8) | b3;
     2b4:	e1850406 	orr	r0, r5, r6, lsl #8
     2b8:	e1800804 	orr	r0, r0, r4, lsl #16
bool prevLeftBtn,leftBtn; // The state of the left button

/****************************************************************************************
 * Subroutine to show a string of HEX data on the HEX displays
****************************************************************************************/
void HEX_PS2(char b1, char b2, char b3) {
     2bc:	e24d3001 	sub	r3, sp, #1
     2c0:	e28d1005 	add	r1, sp, #5
    unsigned char code;
    int           i;

    shift_buffer = (b1 << 16) | (b2 << 8) | b3;
    for (i = 0; i < 6; ++i) {
        nibble = shift_buffer & 0x0000000F; // character is in rightmost nibble
     2c4:	e200200f 	and	r2, r0, #15
        code   = seven_seg_decode_table[nibble];
     2c8:	e28dc018 	add	r12, sp, #24
     2cc:	e08c2002 	add	r2, r12, r2
        hex_segs[i]  = code;
     2d0:	e5522010 	ldrb	r2, [r2, #-16]
     2d4:	e5e32001 	strb	r2, [r3, #1]!
        shift_buffer = shift_buffer >> 4;
     2d8:	e1a00220 	lsr	r0, r0, #4
    unsigned int  shift_buffer, nibble;
    unsigned char code;
    int           i;

    shift_buffer = (b1 << 16) | (b2 << 8) | b3;
    for (i = 0; i < 6; ++i) {
     2dc:	e1530001 	cmp	r3, r1
     2e0:	1afffff7 	bne	2c4 <HEX_PS2+0x68>
        code   = seven_seg_decode_table[nibble];
        hex_segs[i]  = code;
        shift_buffer = shift_buffer >> 4;
    }
    /* drive the hex displays */
    *(HEX3_HEX0_ptr) = *(int *)(hex_segs);
     2e4:	e3a03000 	mov	r3, #0
     2e8:	e34f3f20 	movt	r3, #65312	; 0xff20
     2ec:	e59d2000 	ldr	r2, [sp]
     2f0:	e5832020 	str	r2, [r3, #32]
    *(HEX5_HEX4_ptr) = *(int *)(hex_segs + 4);
     2f4:	e59d2004 	ldr	r2, [sp, #4]
     2f8:	e5832030 	str	r2, [r3, #48]	; 0x30
}
     2fc:	e28dd01c 	add	sp, sp, #28
     300:	e8bd0070 	pop	{r4, r5, r6}
     304:	e12fff1e 	bx	lr

00000308 <wait_for_vsync>:
void wait_for_vsync()
{
    volatile int * pixel_ctrl_ptr = (int *)PIXEL_BUF_CTRL_BASE;
	register int status;
	
	*pixel_ctrl_ptr = 1; // Start synchronization process
     308:	e3033fff 	movw	r3, #16383	; 0x3fff
     30c:	e34f3f20 	movt	r3, #65312	; 0xff20
     310:	e3a02001 	mov	r2, #1
     314:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021
	
	// Keep waiting until the whole screen ahs been drawn
	do {
		status = *(pixel_ctrl_ptr + 3);
     318:	e3032fff 	movw	r2, #16383	; 0x3fff
     31c:	e34f2f20 	movt	r2, #65312	; 0xff20
     320:	e5123fd3 	ldr	r3, [r2, #-4051]	; 0xfffff02d
	} while((status & 0x01) != 0);
     324:	e3130001 	tst	r3, #1
     328:	1afffffc 	bne	320 <wait_for_vsync+0x18>
}
     32c:	e12fff1e 	bx	lr

00000330 <main>:

int main()
{
     330:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    volatile int * pixel_ctrl_ptr = (int *)PIXEL_BUF_CTRL_BASE;
	volatile int * mouse_port_ptr = (int *)PS2_BASE;
	
	set_A9_IRQ_stack(); // initialize the stack pointer for IRQ mode
     334:	eb00038e 	bl	1174 <set_A9_IRQ_stack>
    config_GIC(); // configure the general interrupt controller
     338:	eb0003b6 	bl	1218 <config_GIC>
    // Set up PS2 mouse
    *(mouse_port_ptr) = 0xFF; // reset
     33c:	e3a03000 	mov	r3, #0
     340:	e34f3f20 	movt	r3, #65312	; 0xff20
     344:	e3a020ff 	mov	r2, #255	; 0xff
     348:	e5832100 	str	r2, [r3, #256]	; 0x100
    *(mouse_port_ptr + 1) = 0x1; // write to the PS/2 Control register to enable interrupts
     34c:	e3a02001 	mov	r2, #1
     350:	e5832104 	str	r2, [r3, #260]	; 0x104
    enable_A9_interrupts(); // enable interrupts
     354:	eb00038d 	bl	1190 <enable_A9_interrupts>
	
	// Initialize canvas
	clear_canvas();
     358:	eb00003e 	bl	458 <clear_canvas>
	setup_screen();
     35c:	eb0001ff 	bl	b60 <setup_screen>
	// Initialize mouse position to middle of screen
	prevMouseX = mouseX = 160; prevMouseY = mouseY = 120;
     360:	e3014d8c 	movw	r4, #7564	; 0x1d8c
     364:	e3404000 	movt	r4, #0
     368:	e3a030a0 	mov	r3, #160	; 0xa0
     36c:	e5843000 	str	r3, [r4]
     370:	e5843004 	str	r3, [r4, #4]
     374:	e3a03078 	mov	r3, #120	; 0x78
     378:	e5843008 	str	r3, [r4, #8]
     37c:	e584300c 	str	r3, [r4, #12]
	prevLeftBtn = leftBtn = false;
     380:	e3a06000 	mov	r6, #0
     384:	e5c46010 	strb	r6, [r4, #16]
     388:	e5c46011 	strb	r6, [r4, #17]
	// Initialize default toolbar selections
	currentColour = 0;
     38c:	e30735a8 	movw	r3, #30120	; 0x75a8
     390:	e3403002 	movt	r3, #2
     394:	e5836000 	str	r6, [r3]
	currentOpacity = 4;
     398:	e30735ac 	movw	r3, #30124	; 0x75ac
     39c:	e3403002 	movt	r3, #2
     3a0:	e3a02004 	mov	r2, #4
     3a4:	e5832000 	str	r2, [r3]
	currentTool = 0;
     3a8:	e30735a4 	movw	r3, #30116	; 0x75a4
     3ac:	e3403002 	movt	r3, #2
     3b0:	e5836000 	str	r6, [r3]

    /* set front pixel buffer to start of FPGA On-chip memory */
    *(pixel_ctrl_ptr + 1) = FPGA_ONCHIP_BASE; // first store the address in the back buffer
     3b4:	e3035fff 	movw	r5, #16383	; 0x3fff
     3b8:	e34f5f20 	movt	r5, #65312	; 0xff20
     3bc:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
     3c0:	e5053fdb 	str	r3, [r5, #-4059]	; 0xfffff025
    /* now, swap the front/back buffers, to set the front buffer location */
    wait_for_vsync();
     3c4:	ebffffcf 	bl	308 <wait_for_vsync>
    /* initialize a pointer to the pixel buffer, used by drawing functions */
    pixel_buffer_start = *pixel_ctrl_ptr;
     3c8:	e5153fdf 	ldr	r3, [r5, #-4063]	; 0xfffff021
     3cc:	e5843014 	str	r3, [r4, #20]
    draw_screen(); // pixel_buffer_start points to the pixel buffer
     3d0:	eb000124 	bl	868 <draw_screen>
    /* set back pixel buffer to start of SDRAM memory */
    *(pixel_ctrl_ptr + 1) = DDR_BASE;
     3d4:	e5056fdb 	str	r6, [r5, #-4059]	; 0xfffff025
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
     3d8:	e5153fdb 	ldr	r3, [r5, #-4059]	; 0xfffff025
     3dc:	e5843014 	str	r3, [r4, #20]
	
	while(1) {
		// Draw the current screen
		draw_screen();
		
		if(byte1&0x08 && byte1<0xE0 && (byte1>>4)<0x0A) HEX_PS2(byte1, byte2, byte3);
     3e0:	e30745b5 	movw	r4, #30133	; 0x75b5
     3e4:	e3404002 	movt	r4, #2
     3e8:	e30785b4 	movw	r8, #30132	; 0x75b4
     3ec:	e3408002 	movt	r8, #2
     3f0:	e30775b6 	movw	r7, #30134	; 0x75b6
     3f4:	e3407002 	movt	r7, #2
		
		wait_for_vsync();
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
     3f8:	e3036fff 	movw	r6, #16383	; 0x3fff
     3fc:	e34f6f20 	movt	r6, #65312	; 0xff20
     400:	e3015d8c 	movw	r5, #7564	; 0x1d8c
     404:	e3405000 	movt	r5, #0
    *(pixel_ctrl_ptr + 1) = DDR_BASE;
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
	
	while(1) {
		// Draw the current screen
		draw_screen();
     408:	eb000116 	bl	868 <draw_screen>
		
		if(byte1&0x08 && byte1<0xE0 && (byte1>>4)<0x0A) HEX_PS2(byte1, byte2, byte3);
     40c:	e5d43000 	ldrb	r3, [r4]
     410:	e2033008 	and	r3, r3, #8
     414:	e6ef3073 	uxtb	r3, r3
     418:	e3530000 	cmp	r3, #0
     41c:	0a000009 	beq	448 <main+0x118>
     420:	e5d43000 	ldrb	r3, [r4]
     424:	e35300df 	cmp	r3, #223	; 0xdf
     428:	8a000006 	bhi	448 <main+0x118>
     42c:	e5d43000 	ldrb	r3, [r4]
     430:	e353009f 	cmp	r3, #159	; 0x9f
     434:	8a000003 	bhi	448 <main+0x118>
     438:	e5d40000 	ldrb	r0, [r4]
     43c:	e5d81000 	ldrb	r1, [r8]
     440:	e5d72000 	ldrb	r2, [r7]
     444:	ebffff84 	bl	25c <HEX_PS2>
		
		wait_for_vsync();
     448:	ebffffae 	bl	308 <wait_for_vsync>
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
     44c:	e5163fdb 	ldr	r3, [r6, #-4059]	; 0xfffff025
     450:	e5853014 	str	r3, [r5, #20]
	}
     454:	eaffffeb 	b	408 <main+0xd8>

00000458 <clear_canvas>:
	}
}

// Clears the canvas
void clear_canvas()
{
     458:	e59f2034 	ldr	r2, [pc, #52]	; 494 <clear_canvas+0x3c>
		canvas[TOOLBAR_HEIGHT-15+i][8-i] = 0xF800;
	}
}

// Clears the canvas
void clear_canvas()
     45c:	e2820f99 	add	r0, r2, #612	; 0x264
     460:	e2800002 	add	r0, r0, #2
{
     464:	e3a0c000 	mov	r12, #0
	// Clear canvas dimensions
	for(int x=TOOLBAR_WIDTH; x<SCREEN_WIDTH; x++) {
		for(int y=0; y<SCREEN_HEIGHT; y++) {
			canvas[y][x] = 0xFFFF;
     468:	e3e01000 	mvn	r1, #0
     46c:	ea000006 	b	48c <clear_canvas+0x34>
     470:	e18210b3 	strh	r1, [r2, r3]
     474:	e2833d0a 	add	r3, r3, #640	; 0x280
// Clears the canvas
void clear_canvas()
{
	// Clear canvas dimensions
	for(int x=TOOLBAR_WIDTH; x<SCREEN_WIDTH; x++) {
		for(int y=0; y<SCREEN_HEIGHT; y++) {
     478:	e3530b96 	cmp	r3, #153600	; 0x25800
     47c:	1afffffb 	bne	470 <clear_canvas+0x18>
     480:	e2822002 	add	r2, r2, #2

// Clears the canvas
void clear_canvas()
{
	// Clear canvas dimensions
	for(int x=TOOLBAR_WIDTH; x<SCREEN_WIDTH; x++) {
     484:	e1520000 	cmp	r2, r0
     488:	012fff1e 	bxeq	lr
	}
}

// Clears the canvas
void clear_canvas()
{
     48c:	e1a0300c 	mov	r3, r12
     490:	eafffff6 	b	470 <clear_canvas+0x18>
     494:	00001dbe 	.word	0x00001dbe

00000498 <plot_pixel>:

// Draw a single pixel to the screen
void plot_pixel(int x, int y, short int line_color)
{
	// Make sure the pixel is within bounds
	if(x>=0 && x<320 && y>=0 && y<240) {
     498:	e1e03001 	mvn	r3, r1
     49c:	e1a03fa3 	lsr	r3, r3, #31
     4a0:	e3500d05 	cmp	r0, #320	; 0x140
     4a4:	23a03000 	movcs	r3, #0
     4a8:	e3530000 	cmp	r3, #0
     4ac:	012fff1e 	bxeq	lr
     4b0:	e35100ef 	cmp	r1, #239	; 0xef
     4b4:	c12fff1e 	bxgt	lr
		*(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
     4b8:	e3013da0 	movw	r3, #7584	; 0x1da0
     4bc:	e3403000 	movt	r3, #0
     4c0:	e5933000 	ldr	r3, [r3]
     4c4:	e1a00080 	lsl	r0, r0, #1
     4c8:	e0831501 	add	r1, r3, r1, lsl #10
     4cc:	e18120b0 	strh	r2, [r1, r0]
     4d0:	e12fff1e 	bx	lr

000004d4 <draw_cursor>:
}

// Draws the appropriate cursor to the screen
// Cursor is 5x5 with a tranparent center
void draw_cursor()
{
     4d4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
	if(currentTool==0) { // Draw tool
     4d8:	e30735a4 	movw	r3, #30116	; 0x75a4
     4dc:	e3403002 	movt	r3, #2
     4e0:	e5933000 	ldr	r3, [r3]
     4e4:	e3530000 	cmp	r3, #0
     4e8:	1a00002f 	bne	5ac <draw_cursor+0xd8>
     4ec:	e3e04001 	mvn	r4, #1
		// Draw vertical and horizontal black lines
		for(int dxy=-2; dxy<=2; dxy++) {
			if(mouseY+dxy<SCREEN_HEIGHT && mouseY+dxy>=0 && canvas[mouseY+dxy][mouseX]==0x0000) 
     4f0:	e3016d94 	movw	r6, #7572	; 0x1d94
     4f4:	e3406000 	movt	r6, #0
				plot_pixel(mouseX,mouseY+dxy,0xFFFF);
			else plot_pixel(mouseX,mouseY+dxy,0x0000);
     4f8:	e3015d8c 	movw	r5, #7564	; 0x1d8c
     4fc:	e3405000 	movt	r5, #0
     500:	e3a08000 	mov	r8, #0
void draw_cursor()
{
	if(currentTool==0) { // Draw tool
		// Draw vertical and horizontal black lines
		for(int dxy=-2; dxy<=2; dxy++) {
			if(mouseY+dxy<SCREEN_HEIGHT && mouseY+dxy>=0 && canvas[mouseY+dxy][mouseX]==0x0000) 
     504:	e3017da4 	movw	r7, #7588	; 0x1da4
     508:	e3407000 	movt	r7, #0
				plot_pixel(mouseX,mouseY+dxy,0xFFFF);
     50c:	e3e09000 	mvn	r9, #0
			else plot_pixel(mouseX,mouseY+dxy,0x0000);
			
			if(mouseX+dxy<SCREEN_WIDTH && mouseX+dxy>=0 && canvas[mouseY][mouseX+dxy]==0x0000) 
     510:	e300a13f 	movw	r10, #319	; 0x13f
void draw_cursor()
{
	if(currentTool==0) { // Draw tool
		// Draw vertical and horizontal black lines
		for(int dxy=-2; dxy<=2; dxy++) {
			if(mouseY+dxy<SCREEN_HEIGHT && mouseY+dxy>=0 && canvas[mouseY+dxy][mouseX]==0x0000) 
     514:	e5961000 	ldr	r1, [r6]
     518:	e0841001 	add	r1, r4, r1
     51c:	e35100ef 	cmp	r1, #239	; 0xef
     520:	8a000009 	bhi	54c <draw_cursor+0x78>
     524:	e5950000 	ldr	r0, [r5]
     528:	e0813101 	add	r3, r1, r1, lsl #2
     52c:	e0803303 	add	r3, r0, r3, lsl #6
     530:	e1a03083 	lsl	r3, r3, #1
     534:	e19730f3 	ldrsh	r3, [r7, r3]
     538:	e3530000 	cmp	r3, #0
     53c:	1a000002 	bne	54c <draw_cursor+0x78>
				plot_pixel(mouseX,mouseY+dxy,0xFFFF);
     540:	e1a02009 	mov	r2, r9
     544:	ebffffd3 	bl	498 <plot_pixel>
     548:	ea000002 	b	558 <draw_cursor+0x84>
			else plot_pixel(mouseX,mouseY+dxy,0x0000);
     54c:	e5950000 	ldr	r0, [r5]
     550:	e1a02008 	mov	r2, r8
     554:	ebffffcf 	bl	498 <plot_pixel>
			
			if(mouseX+dxy<SCREEN_WIDTH && mouseX+dxy>=0 && canvas[mouseY][mouseX+dxy]==0x0000) 
     558:	e5950000 	ldr	r0, [r5]
     55c:	e0840000 	add	r0, r4, r0
     560:	e150000a 	cmp	r0, r10
     564:	8a000009 	bhi	590 <draw_cursor+0xbc>
     568:	e5961000 	ldr	r1, [r6]
     56c:	e0813101 	add	r3, r1, r1, lsl #2
     570:	e0803303 	add	r3, r0, r3, lsl #6
     574:	e1a03083 	lsl	r3, r3, #1
     578:	e19730f3 	ldrsh	r3, [r7, r3]
     57c:	e3530000 	cmp	r3, #0
     580:	1a000002 	bne	590 <draw_cursor+0xbc>
				plot_pixel(mouseX+dxy,mouseY,0xFFFF);
     584:	e1a02009 	mov	r2, r9
     588:	ebffffc2 	bl	498 <plot_pixel>
     58c:	ea000002 	b	59c <draw_cursor+0xc8>
			else plot_pixel(mouseX+dxy,mouseY,0x0000);
     590:	e5961000 	ldr	r1, [r6]
     594:	e1a02008 	mov	r2, r8
     598:	ebffffbe 	bl	498 <plot_pixel>
// Cursor is 5x5 with a tranparent center
void draw_cursor()
{
	if(currentTool==0) { // Draw tool
		// Draw vertical and horizontal black lines
		for(int dxy=-2; dxy<=2; dxy++) {
     59c:	e2844001 	add	r4, r4, #1
     5a0:	e3540003 	cmp	r4, #3
     5a4:	1affffda 	bne	514 <draw_cursor+0x40>
     5a8:	ea00007f 	b	7ac <draw_cursor+0x2d8>
			
			if(mouseX+dxy<SCREEN_WIDTH && mouseX+dxy>=0 && canvas[mouseY][mouseX+dxy]==0x0000) 
				plot_pixel(mouseX+dxy,mouseY,0xFFFF);
			else plot_pixel(mouseX+dxy,mouseY,0x0000);
		}
	} else if(currentTool==1) { // Paint bucket tool
     5ac:	e3530001 	cmp	r3, #1
     5b0:	1a00007d 	bne	7ac <draw_cursor+0x2d8>
     5b4:	e3e04001 	mvn	r4, #1
		for(int dxy=-2; dxy<=2; dxy++) {
			// Cross
			if(mouseY+dxy<SCREEN_HEIGHT && mouseY+dxy>=0 && 
     5b8:	e3015d94 	movw	r5, #7572	; 0x1d94
     5bc:	e3405000 	movt	r5, #0
			   canvas[mouseY+dxy][mouseX]==palatte[currentColour]) 
				plot_pixel(mouseX,mouseY+dxy,0xFFFF-palatte[currentColour]);
			else plot_pixel(mouseX,mouseY+dxy,palatte[currentColour]);
     5c0:	e3018d8c 	movw	r8, #7564	; 0x1d8c
     5c4:	e3408000 	movt	r8, #0
     5c8:	e3017920 	movw	r7, #6432	; 0x1920
     5cc:	e3407000 	movt	r7, #0
     5d0:	e30765a4 	movw	r6, #30116	; 0x75a4
     5d4:	e3406002 	movt	r6, #2
		}
	} else if(currentTool==1) { // Paint bucket tool
		for(int dxy=-2; dxy<=2; dxy++) {
			// Cross
			if(mouseY+dxy<SCREEN_HEIGHT && mouseY+dxy>=0 && 
			   canvas[mouseY+dxy][mouseX]==palatte[currentColour]) 
     5d8:	e3019da4 	movw	r9, #7588	; 0x1da4
     5dc:	e3409000 	movt	r9, #0
				plot_pixel(mouseX,mouseY+dxy,0xFFFF-palatte[currentColour]);
			else plot_pixel(mouseX,mouseY+dxy,palatte[currentColour]);
			
			if(mouseX+dxy<SCREEN_WIDTH && mouseX+dxy>=0 && 
     5e0:	e300a13f 	movw	r10, #319	; 0x13f
			else plot_pixel(mouseX+dxy,mouseY,0x0000);
		}
	} else if(currentTool==1) { // Paint bucket tool
		for(int dxy=-2; dxy<=2; dxy++) {
			// Cross
			if(mouseY+dxy<SCREEN_HEIGHT && mouseY+dxy>=0 && 
     5e4:	e5951000 	ldr	r1, [r5]
     5e8:	e0841001 	add	r1, r4, r1
     5ec:	e35100ef 	cmp	r1, #239	; 0xef
     5f0:	8a00000e 	bhi	630 <draw_cursor+0x15c>
			   canvas[mouseY+dxy][mouseX]==palatte[currentColour]) 
     5f4:	e5980000 	ldr	r0, [r8]
     5f8:	e0813101 	add	r3, r1, r1, lsl #2
     5fc:	e0803303 	add	r3, r0, r3, lsl #6
     600:	e1a03083 	lsl	r3, r3, #1
     604:	e19930b3 	ldrh	r3, [r9, r3]
     608:	e5962004 	ldr	r2, [r6, #4]
     60c:	e1a02082 	lsl	r2, r2, #1
			else plot_pixel(mouseX+dxy,mouseY,0x0000);
		}
	} else if(currentTool==1) { // Paint bucket tool
		for(int dxy=-2; dxy<=2; dxy++) {
			// Cross
			if(mouseY+dxy<SCREEN_HEIGHT && mouseY+dxy>=0 && 
     610:	e197c0f2 	ldrsh	r12, [r7, r2]
     614:	e6bf2073 	sxth	r2, r3
     618:	e15c0002 	cmp	r12, r2
     61c:	1a000003 	bne	630 <draw_cursor+0x15c>
			   canvas[mouseY+dxy][mouseX]==palatte[currentColour]) 
				plot_pixel(mouseX,mouseY+dxy,0xFFFF-palatte[currentColour]);
     620:	e1e02003 	mvn	r2, r3
     624:	e6bf2072 	sxth	r2, r2
     628:	ebffff9a 	bl	498 <plot_pixel>
     62c:	ea000004 	b	644 <draw_cursor+0x170>
			else plot_pixel(mouseX,mouseY+dxy,palatte[currentColour]);
     630:	e5963004 	ldr	r3, [r6, #4]
     634:	e1a03083 	lsl	r3, r3, #1
     638:	e5980000 	ldr	r0, [r8]
     63c:	e19720f3 	ldrsh	r2, [r7, r3]
     640:	ebffff94 	bl	498 <plot_pixel>
			
			if(mouseX+dxy<SCREEN_WIDTH && mouseX+dxy>=0 && 
     644:	e5980000 	ldr	r0, [r8]
     648:	e0840000 	add	r0, r4, r0
     64c:	e150000a 	cmp	r0, r10
     650:	8a00000e 	bhi	690 <draw_cursor+0x1bc>
			   canvas[mouseY][mouseX+dxy]==palatte[currentColour]) 
     654:	e5951000 	ldr	r1, [r5]
     658:	e0813101 	add	r3, r1, r1, lsl #2
     65c:	e0803303 	add	r3, r0, r3, lsl #6
     660:	e1a03083 	lsl	r3, r3, #1
     664:	e19930b3 	ldrh	r3, [r9, r3]
     668:	e5962004 	ldr	r2, [r6, #4]
     66c:	e1a02082 	lsl	r2, r2, #1
			if(mouseY+dxy<SCREEN_HEIGHT && mouseY+dxy>=0 && 
			   canvas[mouseY+dxy][mouseX]==palatte[currentColour]) 
				plot_pixel(mouseX,mouseY+dxy,0xFFFF-palatte[currentColour]);
			else plot_pixel(mouseX,mouseY+dxy,palatte[currentColour]);
			
			if(mouseX+dxy<SCREEN_WIDTH && mouseX+dxy>=0 && 
     670:	e197c0f2 	ldrsh	r12, [r7, r2]
     674:	e6bf2073 	sxth	r2, r3
     678:	e15c0002 	cmp	r12, r2
     67c:	1a000003 	bne	690 <draw_cursor+0x1bc>
			   canvas[mouseY][mouseX+dxy]==palatte[currentColour]) 
				plot_pixel(mouseX+dxy,mouseY,0xFFFF-palatte[currentColour]);
     680:	e1e02003 	mvn	r2, r3
     684:	e6bf2072 	sxth	r2, r2
     688:	ebffff82 	bl	498 <plot_pixel>
     68c:	ea000004 	b	6a4 <draw_cursor+0x1d0>
			else plot_pixel(mouseX+dxy,mouseY,palatte[currentColour]);
     690:	e5963004 	ldr	r3, [r6, #4]
     694:	e1a03083 	lsl	r3, r3, #1
     698:	e5951000 	ldr	r1, [r5]
     69c:	e19720f3 	ldrsh	r2, [r7, r3]
     6a0:	ebffff7c 	bl	498 <plot_pixel>
			
			// Diagonals
			if(mouseX+dxy<SCREEN_WIDTH && mouseX+dxy>=0 && mouseY+dxy<SCREEN_HEIGHT && mouseY+dxy>=0 && 
     6a4:	e5980000 	ldr	r0, [r8]
     6a8:	e0840000 	add	r0, r4, r0
     6ac:	e150000a 	cmp	r0, r10
     6b0:	8a000013 	bhi	704 <draw_cursor+0x230>
     6b4:	e5951000 	ldr	r1, [r5]
     6b8:	e0841001 	add	r1, r4, r1
     6bc:	e35100ef 	cmp	r1, #239	; 0xef
     6c0:	ca00000f 	bgt	704 <draw_cursor+0x230>
     6c4:	e3510000 	cmp	r1, #0
     6c8:	ba00000d 	blt	704 <draw_cursor+0x230>
			   canvas[mouseY+dxy][mouseX+dxy]==palatte[currentColour]) 
     6cc:	e0813101 	add	r3, r1, r1, lsl #2
     6d0:	e0803303 	add	r3, r0, r3, lsl #6
     6d4:	e1a03083 	lsl	r3, r3, #1
     6d8:	e19930b3 	ldrh	r3, [r9, r3]
     6dc:	e5962004 	ldr	r2, [r6, #4]
     6e0:	e1a02082 	lsl	r2, r2, #1
			   canvas[mouseY][mouseX+dxy]==palatte[currentColour]) 
				plot_pixel(mouseX+dxy,mouseY,0xFFFF-palatte[currentColour]);
			else plot_pixel(mouseX+dxy,mouseY,palatte[currentColour]);
			
			// Diagonals
			if(mouseX+dxy<SCREEN_WIDTH && mouseX+dxy>=0 && mouseY+dxy<SCREEN_HEIGHT && mouseY+dxy>=0 && 
     6e4:	e197c0f2 	ldrsh	r12, [r7, r2]
     6e8:	e6bf2073 	sxth	r2, r3
     6ec:	e15c0002 	cmp	r12, r2
     6f0:	1a000003 	bne	704 <draw_cursor+0x230>
			   canvas[mouseY+dxy][mouseX+dxy]==palatte[currentColour]) 
				plot_pixel(mouseX+dxy,mouseY+dxy,0xFFFF-palatte[currentColour]);
     6f4:	e1e02003 	mvn	r2, r3
     6f8:	e6bf2072 	sxth	r2, r2
     6fc:	ebffff65 	bl	498 <plot_pixel>
     700:	ea000005 	b	71c <draw_cursor+0x248>
			else plot_pixel(mouseX+dxy,mouseY+dxy,palatte[currentColour]);
     704:	e5951000 	ldr	r1, [r5]
     708:	e5963004 	ldr	r3, [r6, #4]
     70c:	e1a03083 	lsl	r3, r3, #1
     710:	e0841001 	add	r1, r4, r1
     714:	e19720f3 	ldrsh	r2, [r7, r3]
     718:	ebffff5e 	bl	498 <plot_pixel>
			
			if(mouseX+dxy<SCREEN_WIDTH && mouseX+dxy>=0 && mouseY+dxy<SCREEN_HEIGHT && mouseY+dxy>=0 && 
     71c:	e5980000 	ldr	r0, [r8]
     720:	e0803004 	add	r3, r0, r4
     724:	e153000a 	cmp	r3, r10
     728:	8a000015 	bhi	784 <draw_cursor+0x2b0>
     72c:	e5951000 	ldr	r1, [r5]
     730:	e0841001 	add	r1, r4, r1
     734:	e35100ef 	cmp	r1, #239	; 0xef
     738:	ca000011 	bgt	784 <draw_cursor+0x2b0>
     73c:	e3510000 	cmp	r1, #0
     740:	ba00000f 	blt	784 <draw_cursor+0x2b0>
			   canvas[mouseY+dxy][mouseX-dxy]==palatte[currentColour]) 
     744:	e0643000 	rsb	r3, r4, r0
     748:	e0812101 	add	r2, r1, r1, lsl #2
     74c:	e0832302 	add	r2, r3, r2, lsl #6
     750:	e1a02082 	lsl	r2, r2, #1
     754:	e19920b2 	ldrh	r2, [r9, r2]
     758:	e596c004 	ldr	r12, [r6, #4]
     75c:	e1a0c08c 	lsl	r12, r12, #1
			if(mouseX+dxy<SCREEN_WIDTH && mouseX+dxy>=0 && mouseY+dxy<SCREEN_HEIGHT && mouseY+dxy>=0 && 
			   canvas[mouseY+dxy][mouseX+dxy]==palatte[currentColour]) 
				plot_pixel(mouseX+dxy,mouseY+dxy,0xFFFF-palatte[currentColour]);
			else plot_pixel(mouseX+dxy,mouseY+dxy,palatte[currentColour]);
			
			if(mouseX+dxy<SCREEN_WIDTH && mouseX+dxy>=0 && mouseY+dxy<SCREEN_HEIGHT && mouseY+dxy>=0 && 
     760:	e197e0fc 	ldrsh	lr, [r7, r12]
     764:	e6bfc072 	sxth	r12, r2
     768:	e15e000c 	cmp	lr, r12
     76c:	1a000004 	bne	784 <draw_cursor+0x2b0>
			   canvas[mouseY+dxy][mouseX-dxy]==palatte[currentColour]) 
				plot_pixel(mouseX-dxy,mouseY+dxy,0xFFFF-palatte[currentColour]);
     770:	e1e02002 	mvn	r2, r2
     774:	e1a00003 	mov	r0, r3
     778:	e6bf2072 	sxth	r2, r2
     77c:	ebffff45 	bl	498 <plot_pixel>
     780:	ea000006 	b	7a0 <draw_cursor+0x2cc>
			else plot_pixel(mouseX-dxy,mouseY+dxy,palatte[currentColour]);
     784:	e5951000 	ldr	r1, [r5]
     788:	e5963004 	ldr	r3, [r6, #4]
     78c:	e1a03083 	lsl	r3, r3, #1
     790:	e0640000 	rsb	r0, r4, r0
     794:	e0841001 	add	r1, r4, r1
     798:	e19720f3 	ldrsh	r2, [r7, r3]
     79c:	ebffff3d 	bl	498 <plot_pixel>
			if(mouseX+dxy<SCREEN_WIDTH && mouseX+dxy>=0 && canvas[mouseY][mouseX+dxy]==0x0000) 
				plot_pixel(mouseX+dxy,mouseY,0xFFFF);
			else plot_pixel(mouseX+dxy,mouseY,0x0000);
		}
	} else if(currentTool==1) { // Paint bucket tool
		for(int dxy=-2; dxy<=2; dxy++) {
     7a0:	e2844001 	add	r4, r4, #1
     7a4:	e3540003 	cmp	r4, #3
     7a8:	1affff8d 	bne	5e4 <draw_cursor+0x110>
			else plot_pixel(mouseX-dxy,mouseY+dxy,palatte[currentColour]);
		}
	}
	
	// A transparent center means whatever is on the canvas at the position
	plot_pixel(mouseX,mouseY,canvas[mouseY][mouseX]);
     7ac:	e3013d94 	movw	r3, #7572	; 0x1d94
     7b0:	e3403000 	movt	r3, #0
     7b4:	e5931000 	ldr	r1, [r3]
     7b8:	e3013d8c 	movw	r3, #7564	; 0x1d8c
     7bc:	e3403000 	movt	r3, #0
     7c0:	e5930000 	ldr	r0, [r3]
     7c4:	e3013da4 	movw	r3, #7588	; 0x1da4
     7c8:	e3403000 	movt	r3, #0
     7cc:	e0812101 	add	r2, r1, r1, lsl #2
     7d0:	e0802302 	add	r2, r0, r2, lsl #6
     7d4:	e1a02082 	lsl	r2, r2, #1
     7d8:	e19320f2 	ldrsh	r2, [r3, r2]
     7dc:	ebffff2d 	bl	498 <plot_pixel>
     7e0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}

000007e4 <draw_border>:
}

// Draw a dark grey 9x9 border given its top left position
void draw_border(int x, int y)
{
     7e4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     7e8:	e24dd00c 	sub	sp, sp, #12
     7ec:	e1a07000 	mov	r7, r0
     7f0:	e1a08001 	mov	r8, r1
	// A transparent center means whatever is on the canvas at the position
	plot_pixel(mouseX,mouseY,canvas[mouseY][mouseX]);
}

// Draw a dark grey 9x9 border given its top left position
void draw_border(int x, int y)
     7f4:	e280b009 	add	r11, r0, #9
     7f8:	e1a04000 	mov	r4, r0
{
	// Draws 4 lines surrounding the colour
	for(int i=0; i<9; i++) {
		plot_pixel(x+i,y,0x39E7); // Top
     7fc:	e30359e7 	movw	r5, #14823	; 0x39e7
		plot_pixel(x+i,y+8,0x39E7); // Bottom
     800:	e2819008 	add	r9, r1, #8
	// A transparent center means whatever is on the canvas at the position
	plot_pixel(mouseX,mouseY,canvas[mouseY][mouseX]);
}

// Draw a dark grey 9x9 border given its top left position
void draw_border(int x, int y)
     804:	e060a001 	rsb	r10, r0, r1
	// Draws 4 lines surrounding the colour
	for(int i=0; i<9; i++) {
		plot_pixel(x+i,y,0x39E7); // Top
		plot_pixel(x+i,y+8,0x39E7); // Bottom
		plot_pixel(x,y+i,0x39E7); // Left
		plot_pixel(x+8,y+i,0x39E7);// Right
     808:	e2803008 	add	r3, r0, #8
     80c:	e58d3004 	str	r3, [sp, #4]
// Draw a dark grey 9x9 border given its top left position
void draw_border(int x, int y)
{
	// Draws 4 lines surrounding the colour
	for(int i=0; i<9; i++) {
		plot_pixel(x+i,y,0x39E7); // Top
     810:	e1a00004 	mov	r0, r4
     814:	e1a01008 	mov	r1, r8
     818:	e1a02005 	mov	r2, r5
     81c:	ebffff1d 	bl	498 <plot_pixel>
		plot_pixel(x+i,y+8,0x39E7); // Bottom
     820:	e1a00004 	mov	r0, r4
     824:	e1a01009 	mov	r1, r9
     828:	e1a02005 	mov	r2, r5
     82c:	ebffff19 	bl	498 <plot_pixel>
	// A transparent center means whatever is on the canvas at the position
	plot_pixel(mouseX,mouseY,canvas[mouseY][mouseX]);
}

// Draw a dark grey 9x9 border given its top left position
void draw_border(int x, int y)
     830:	e08a6004 	add	r6, r10, r4
{
	// Draws 4 lines surrounding the colour
	for(int i=0; i<9; i++) {
		plot_pixel(x+i,y,0x39E7); // Top
		plot_pixel(x+i,y+8,0x39E7); // Bottom
		plot_pixel(x,y+i,0x39E7); // Left
     834:	e1a00007 	mov	r0, r7
     838:	e1a01006 	mov	r1, r6
     83c:	e1a02005 	mov	r2, r5
     840:	ebffff14 	bl	498 <plot_pixel>
		plot_pixel(x+8,y+i,0x39E7);// Right
     844:	e59d0004 	ldr	r0, [sp, #4]
     848:	e1a01006 	mov	r1, r6
     84c:	e1a02005 	mov	r2, r5
     850:	ebffff10 	bl	498 <plot_pixel>
     854:	e2844001 	add	r4, r4, #1

// Draw a dark grey 9x9 border given its top left position
void draw_border(int x, int y)
{
	// Draws 4 lines surrounding the colour
	for(int i=0; i<9; i++) {
     858:	e154000b 	cmp	r4, r11
     85c:	1affffeb 	bne	810 <draw_border+0x2c>
		plot_pixel(x+i,y,0x39E7); // Top
		plot_pixel(x+i,y+8,0x39E7); // Bottom
		plot_pixel(x,y+i,0x39E7); // Left
		plot_pixel(x+8,y+i,0x39E7);// Right
	}
}
     860:	e28dd00c 	add	sp, sp, #12
     864:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000868 <draw_screen>:
	}
}

// Draws the canvas and other items to the screen
void draw_screen()
{
     868:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     86c:	e3017da4 	movw	r7, #7588	; 0x1da4
     870:	e3407000 	movt	r7, #0
	// Draw the main screen
	for(int x=0; x<SCREEN_WIDTH; x++) {
     874:	e3a06000 	mov	r6, #0
	}
}

// Draws the canvas and other items to the screen
void draw_screen()
{
     878:	e1a08006 	mov	r8, r6
     87c:	ea00000b 	b	8b0 <draw_screen+0x48>
	// Draw the main screen
	for(int x=0; x<SCREEN_WIDTH; x++) {
		for(int y=0; y<SCREEN_HEIGHT; y++) {
			plot_pixel(x,y,canvas[y][x]);
     880:	e1a00006 	mov	r0, r6
     884:	e1a01004 	mov	r1, r4
     888:	e19720f5 	ldrsh	r2, [r7, r5]
     88c:	ebffff01 	bl	498 <plot_pixel>
// Draws the canvas and other items to the screen
void draw_screen()
{
	// Draw the main screen
	for(int x=0; x<SCREEN_WIDTH; x++) {
		for(int y=0; y<SCREEN_HEIGHT; y++) {
     890:	e2844001 	add	r4, r4, #1
     894:	e2855d0a 	add	r5, r5, #640	; 0x280
     898:	e35400f0 	cmp	r4, #240	; 0xf0
     89c:	1afffff7 	bne	880 <draw_screen+0x18>

// Draws the canvas and other items to the screen
void draw_screen()
{
	// Draw the main screen
	for(int x=0; x<SCREEN_WIDTH; x++) {
     8a0:	e2866001 	add	r6, r6, #1
     8a4:	e2877002 	add	r7, r7, #2
     8a8:	e3560d05 	cmp	r6, #320	; 0x140
     8ac:	0a000002 	beq	8bc <draw_screen+0x54>
	}
}

// Draws the canvas and other items to the screen
void draw_screen()
{
     8b0:	e1a05008 	mov	r5, r8
     8b4:	e1a04008 	mov	r4, r8
     8b8:	eafffff0 	b	880 <draw_screen+0x18>
		for(int y=0; y<SCREEN_HEIGHT; y++) {
			plot_pixel(x,y,canvas[y][x]);
		}
	}
	
	draw_cursor(); // Draw the cursor
     8bc:	ebffff04 	bl	4d4 <draw_cursor>
	draw_border(2,10*(currentColour+1)-2); // Border around current colour
     8c0:	e30745a4 	movw	r4, #30116	; 0x75a4
     8c4:	e3404002 	movt	r4, #2
     8c8:	e5943004 	ldr	r3, [r4, #4]
     8cc:	e2833001 	add	r3, r3, #1
     8d0:	e0833103 	add	r3, r3, r3, lsl #2
     8d4:	e1a01083 	lsl	r1, r3, #1
     8d8:	e3a00002 	mov	r0, #2
     8dc:	e2411002 	sub	r1, r1, #2
     8e0:	ebffffbf 	bl	7e4 <draw_border>
	draw_border(2,TOOLBAR_HEIGHT-17-10*currentOpacity); // Border around current opacity
     8e4:	e5943008 	ldr	r3, [r4, #8]
     8e8:	e3e01009 	mvn	r1, #9
     8ec:	e0010391 	mul	r1, r1, r3
     8f0:	e3a00002 	mov	r0, #2
     8f4:	e28110df 	add	r1, r1, #223	; 0xdf
     8f8:	ebffffb9 	bl	7e4 <draw_border>
	draw_border(2,131+10*currentTool); // Border around current tool
     8fc:	e5943000 	ldr	r3, [r4]
     900:	e0833103 	add	r3, r3, r3, lsl #2
     904:	e1a01083 	lsl	r1, r3, #1
     908:	e3a00002 	mov	r0, #2
     90c:	e2811083 	add	r1, r1, #131	; 0x83
     910:	ebffffb3 	bl	7e4 <draw_border>
     914:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00000918 <swap>:
}

// Swaps 2 numbers
void swap(int * x, int * y)
{
	int temp = *x;
     918:	e5903000 	ldr	r3, [r0]
	*x = *y;
     91c:	e5912000 	ldr	r2, [r1]
     920:	e5802000 	str	r2, [r0]
	*y = temp;
     924:	e5813000 	str	r3, [r1]
     928:	e12fff1e 	bx	lr

0000092c <getColourAfterOpacity>:
	}
}

// Returns the colour after applying the current opacity 
short int getColourAfterOpacity(short int fg, short int bg, int opacity)
{
     92c:	e92d0030 	push	{r4, r5}
	bgR = (bg>>11) & 0b11111;
	
	// Mix the colours together and get the new colour after opacity has been applied
	short int newColour;
	int newR,newG,newB;
	newR = (opacity*fgR + (4-opacity)*bgR)/4;
     930:	e2623004 	rsb	r3, r2, #4
{
	// Extract r,g,b values from foregound and background colours
	int fgR,fgG,fgB;
	fgB = fg & 0b11111;
	fgG = (fg>>5) & 0b111111;
	fgR = (fg>>11) & 0b11111;
     934:	e7e445d0 	ubfx	r4, r0, #11, #5
	
	int bgR,bgG,bgB;
	bgB = bg & 0b11111;
	bgG = (bg>>5) & 0b111111;
	bgR = (bg>>11) & 0b11111;
     938:	e7e4c5d1 	ubfx	r12, r1, #11, #5
	
	// Mix the colours together and get the new colour after opacity has been applied
	short int newColour;
	int newR,newG,newB;
	newR = (opacity*fgR + (4-opacity)*bgR)/4;
     93c:	e00c039c 	mul	r12, r12, r3
     940:	e02cc294 	mla	r12, r4, r2, r12
     944:	e28c5003 	add	r5, r12, #3
     948:	e35c0000 	cmp	r12, #0
     94c:	b1a0c005 	movlt	r12, r5
     950:	e1a0514c 	asr	r5, r12, #2
short int getColourAfterOpacity(short int fg, short int bg, int opacity)
{
	// Extract r,g,b values from foregound and background colours
	int fgR,fgG,fgB;
	fgB = fg & 0b11111;
	fgG = (fg>>5) & 0b111111;
     954:	e7e542d0 	ubfx	r4, r0, #5, #6
	fgR = (fg>>11) & 0b11111;
	
	int bgR,bgG,bgB;
	bgB = bg & 0b11111;
	bgG = (bg>>5) & 0b111111;
     958:	e7e5c2d1 	ubfx	r12, r1, #5, #6
	
	// Mix the colours together and get the new colour after opacity has been applied
	short int newColour;
	int newR,newG,newB;
	newR = (opacity*fgR + (4-opacity)*bgR)/4;
	newG = (opacity*fgG + (4-opacity)*bgG)/4;
     95c:	e00c0c93 	mul	r12, r3, r12
     960:	e02cc294 	mla	r12, r4, r2, r12
     964:	e28c4003 	add	r4, r12, #3
     968:	e35c0000 	cmp	r12, #0
     96c:	b1a0c004 	movlt	r12, r4
     970:	e1a0414c 	asr	r4, r12, #2
	newB = (opacity*fgB + (4-opacity)*bgB)/4;
	
	newColour = (newR<<11) + (newG<<5) + newB;
     974:	e1a04284 	lsl	r4, r4, #5
     978:	e084c585 	add	r12, r4, r5, lsl #11
// Returns the colour after applying the current opacity 
short int getColourAfterOpacity(short int fg, short int bg, int opacity)
{
	// Extract r,g,b values from foregound and background colours
	int fgR,fgG,fgB;
	fgB = fg & 0b11111;
     97c:	e200001f 	and	r0, r0, #31
	fgG = (fg>>5) & 0b111111;
	fgR = (fg>>11) & 0b11111;
	
	int bgR,bgG,bgB;
	bgB = bg & 0b11111;
     980:	e201101f 	and	r1, r1, #31
	// Mix the colours together and get the new colour after opacity has been applied
	short int newColour;
	int newR,newG,newB;
	newR = (opacity*fgR + (4-opacity)*bgR)/4;
	newG = (opacity*fgG + (4-opacity)*bgG)/4;
	newB = (opacity*fgB + (4-opacity)*bgB)/4;
     984:	e0030193 	mul	r3, r3, r1
     988:	e0223290 	mla	r2, r0, r2, r3
     98c:	e2820003 	add	r0, r2, #3
     990:	e3520000 	cmp	r2, #0
     994:	b1a02000 	movlt	r2, r0
	
	newColour = (newR<<11) + (newG<<5) + newB;
     998:	e08c0142 	add	r0, r12, r2, asr #2
	
	return newColour;
}
     99c:	e6bf0070 	sxth	r0, r0
     9a0:	e8bd0030 	pop	{r4, r5}
     9a4:	e12fff1e 	bx	lr

000009a8 <draw_line>:
	}
}

// Draws a line from the previous to the current mouse position
void draw_line(int x1, int y1, int x2, int y2)
{
     9a8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     9ac:	e24dd024 	sub	sp, sp, #36	; 0x24
     9b0:	e58d001c 	str	r0, [sp, #28]
     9b4:	e58d1018 	str	r1, [sp, #24]
     9b8:	e58d2014 	str	r2, [sp, #20]
     9bc:	e58d3010 	str	r3, [sp, #16]
	// Get the current colour
	int colour = palatte[currentColour];
     9c0:	e301c920 	movw	r12, #6432	; 0x1920
     9c4:	e340c000 	movt	r12, #0
     9c8:	e30745a4 	movw	r4, #30116	; 0x75a4
     9cc:	e3404002 	movt	r4, #2
     9d0:	e5944004 	ldr	r4, [r4, #4]
     9d4:	e1a04084 	lsl	r4, r4, #1
     9d8:	e19c80b4 	ldrh	r8, [r12, r4]
	
	// Check if it's a dot??
	if(x1==x2 && y1==y2) {
     9dc:	e1510003 	cmp	r1, r3
     9e0:	01500002 	cmpeq	r0, r2
     9e4:	1a000006 	bne	a04 <draw_line+0x5c>
		canvas[y1][x1] = colour;
     9e8:	e3013da4 	movw	r3, #7588	; 0x1da4
     9ec:	e3403000 	movt	r3, #0
     9f0:	e0811101 	add	r1, r1, r1, lsl #2
     9f4:	e0802301 	add	r2, r0, r1, lsl #6
     9f8:	e1a02082 	lsl	r2, r2, #1
     9fc:	e18380b2 	strh	r8, [r3, r2]
		return;
     a00:	ea000054 	b	b58 <draw_line+0x1b0>
	}
	
	// Check steepness of the line, if it is steep, it's better
	// to move along the y-axis when drawing
	bool is_steep = abs(y2-y1) > abs(x2-x1);
     a04:	e0613003 	rsb	r3, r1, r3
     a08:	e023bfc3 	eor	r11, r3, r3, asr #31
     a0c:	e04bbfc3 	sub	r11, r11, r3, asr #31
     a10:	e0603002 	rsb	r3, r0, r2
     a14:	e3530000 	cmp	r3, #0
     a18:	b2633000 	rsblt	r3, r3, #0
     a1c:	e15b0003 	cmp	r11, r3
     a20:	d3a0b000 	movle	r11, #0
     a24:	c3a0b001 	movgt	r11, #1
	// If it is steep switch the x and y values
	// the drawing loop will decide how the drawing will occur
	if(is_steep) {
     a28:	e35b0000 	cmp	r11, #0
     a2c:	0a000005 	beq	a48 <draw_line+0xa0>
		swap(&x1,&y1);
     a30:	e28d001c 	add	r0, sp, #28
     a34:	e28d1018 	add	r1, sp, #24
     a38:	ebffffb6 	bl	918 <swap>
		swap(&x2,&y2);
     a3c:	e28d0014 	add	r0, sp, #20
     a40:	e28d1010 	add	r1, sp, #16
     a44:	ebffffb3 	bl	918 <swap>
	}
	
	// We are going to increment from x1 to x2 so 
	// swap the endpoints if x1 > x2
	if(x1 > x2) {
     a48:	e59d3014 	ldr	r3, [sp, #20]
     a4c:	e59d201c 	ldr	r2, [sp, #28]
     a50:	e1520003 	cmp	r2, r3
     a54:	da000005 	ble	a70 <draw_line+0xc8>
		swap(&x1,&x2);
     a58:	e28d001c 	add	r0, sp, #28
     a5c:	e28d1014 	add	r1, sp, #20
     a60:	ebffffac 	bl	918 <swap>
		swap(&y1,&y2);
     a64:	e28d0018 	add	r0, sp, #24
     a68:	e28d1010 	add	r1, sp, #16
     a6c:	ebffffa9 	bl	918 <swap>
	}
	
	int deltax = x2-x1;
     a70:	e59d9014 	ldr	r9, [sp, #20]
     a74:	e59d401c 	ldr	r4, [sp, #28]
     a78:	e0641009 	rsb	r1, r4, r9
     a7c:	e58d1000 	str	r1, [sp]
	int deltay = abs(y2-y1);
     a80:	e59d3010 	ldr	r3, [sp, #16]
     a84:	e59d6018 	ldr	r6, [sp, #24]
     a88:	e0667003 	rsb	r7, r6, r3
     a8c:	e3570000 	cmp	r7, #0
     a90:	b2677000 	rsblt	r7, r7, #0
	int error = -(deltax/2);
     a94:	e0815fa1 	add	r5, r1, r1, lsr #31
     a98:	e1a050c5 	asr	r5, r5, #1
     a9c:	e2655000 	rsb	r5, r5, #0
	int x,y,y_step;
	
	// Figure out how y will be incremented
	if(y1<y2) y_step = 1;
     aa0:	e1530006 	cmp	r3, r6
     aa4:	d3e02000 	mvnle	r2, #0
     aa8:	c3a02001 	movgt	r2, #1
     aac:	e58d200c 	str	r2, [sp, #12]
	else y_step = -1;
	
	for(x=x1,y=y1; x<=x2; x++) {
     ab0:	e1590004 	cmp	r9, r4
     ab4:	ba000027 	blt	b58 <draw_line+0x1b0>
		// If the line is steep the x and y values are swapped
		// Ensure that the drawing is within bounds of the canvas
		if(is_steep && y>=TOOLBAR_WIDTH) {
			canvas[x][y] = getColourAfterOpacity(colour,canvas[x][y],currentOpacity);
     ab8:	e30735a4 	movw	r3, #30116	; 0x75a4
     abc:	e3403002 	movt	r3, #2
     ac0:	e5933008 	ldr	r3, [r3, #8]
     ac4:	e58d3004 	str	r3, [sp, #4]
		} else if(x>=TOOLBAR_WIDTH) {
			canvas[y][x] = getColourAfterOpacity(colour,canvas[y][x],currentOpacity);
     ac8:	e6bf8078 	sxth	r8, r8
     acc:	e58d8008 	str	r8, [sp, #8]
     ad0:	e3018da4 	movw	r8, #7588	; 0x1da4
     ad4:	e3408000 	movt	r8, #0
	else y_step = -1;
	
	for(x=x1,y=y1; x<=x2; x++) {
		// If the line is steep the x and y values are swapped
		// Ensure that the drawing is within bounds of the canvas
		if(is_steep && y>=TOOLBAR_WIDTH) {
     ad8:	e356000c 	cmp	r6, #12
     adc:	d3a03000 	movle	r3, #0
     ae0:	c20b3001 	andgt	r3, r11, #1
     ae4:	e3530000 	cmp	r3, #0
     ae8:	0a000008 	beq	b10 <draw_line+0x168>
			canvas[x][y] = getColourAfterOpacity(colour,canvas[x][y],currentOpacity);
     aec:	e084a104 	add	r10, r4, r4, lsl #2
     af0:	e086a30a 	add	r10, r6, r10, lsl #6
     af4:	e1a0a08a 	lsl	r10, r10, #1
     af8:	e59d0008 	ldr	r0, [sp, #8]
     afc:	e19810fa 	ldrsh	r1, [r8, r10]
     b00:	e59d2004 	ldr	r2, [sp, #4]
     b04:	ebffff88 	bl	92c <getColourAfterOpacity>
     b08:	e18800ba 	strh	r0, [r8, r10]
     b0c:	ea000009 	b	b38 <draw_line+0x190>
		} else if(x>=TOOLBAR_WIDTH) {
     b10:	e354000c 	cmp	r4, #12
     b14:	da000007 	ble	b38 <draw_line+0x190>
			canvas[y][x] = getColourAfterOpacity(colour,canvas[y][x],currentOpacity);
     b18:	e086a106 	add	r10, r6, r6, lsl #2
     b1c:	e084a30a 	add	r10, r4, r10, lsl #6
     b20:	e1a0a08a 	lsl	r10, r10, #1
     b24:	e59d0008 	ldr	r0, [sp, #8]
     b28:	e19810fa 	ldrsh	r1, [r8, r10]
     b2c:	e59d2004 	ldr	r2, [sp, #4]
     b30:	ebffff7d 	bl	92c <getColourAfterOpacity>
     b34:	e18800ba 	strh	r0, [r8, r10]
		}
		
		// Check margin of error
		error += deltay;
		if(error>=0) {
     b38:	e0955007 	adds	r5, r5, r7
			y += y_step; // Increment y val
     b3c:	559d300c 	ldrpl	r3, [sp, #12]
     b40:	50866003 	addpl	r6, r6, r3
			error -= deltax; // Reset error
     b44:	559d1000 	ldrpl	r1, [sp]
     b48:	50615005 	rsbpl	r5, r1, r5
	
	// Figure out how y will be incremented
	if(y1<y2) y_step = 1;
	else y_step = -1;
	
	for(x=x1,y=y1; x<=x2; x++) {
     b4c:	e2844001 	add	r4, r4, #1
     b50:	e1590004 	cmp	r9, r4
     b54:	aaffffdf 	bge	ad8 <draw_line+0x130>
		if(error>=0) {
			y += y_step; // Increment y val
			error -= deltax; // Reset error
		}
	}
}
     b58:	e28dd024 	add	sp, sp, #36	; 0x24
     b5c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000b60 <setup_screen>:
static int dfsLimit = 4000; // Maximum dfs limit
int dfsCount;

// Sets up the canvas
void setup_screen()
{
     b60:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     b64:	e24dd014 	sub	sp, sp, #20
     b68:	e301ada4 	movw	r10, #7588	; 0x1da4
     b6c:	e340a000 	movt	r10, #0
int currentColour,currentOpacity,currentTool;
static int dfsLimit = 4000; // Maximum dfs limit
int dfsCount;

// Sets up the canvas
void setup_screen()
     b70:	e28ac01a 	add	r12, r10, #26
     b74:	e1a0200a 	mov	r2, r10
{
     b78:	e3a00000 	mov	r0, #0
	// Draw the toolbar background (light grey)
	for(int x=0; x<TOOLBAR_WIDTH; x++) {
		for(int y=0; y<TOOLBAR_HEIGHT; y++) {
			canvas[y][x] = 0xBDF7;
     b7c:	e30b1df7 	movw	r1, #48631	; 0xbdf7
     b80:	e34f1fff 	movt	r1, #65535	; 0xffff
     b84:	ea000010 	b	bcc <setup_screen+0x6c>
     b88:	e18210b3 	strh	r1, [r2, r3]
     b8c:	e2833d0a 	add	r3, r3, #640	; 0x280
// Sets up the canvas
void setup_screen()
{
	// Draw the toolbar background (light grey)
	for(int x=0; x<TOOLBAR_WIDTH; x++) {
		for(int y=0; y<TOOLBAR_HEIGHT; y++) {
     b90:	e3530b96 	cmp	r3, #153600	; 0x25800
     b94:	1afffffb 	bne	b88 <setup_screen+0x28>
     b98:	e2822002 	add	r2, r2, #2

// Sets up the canvas
void setup_screen()
{
	// Draw the toolbar background (light grey)
	for(int x=0; x<TOOLBAR_WIDTH; x++) {
     b9c:	e152000c 	cmp	r2, r12
     ba0:	1a000009 	bne	bcc <setup_screen+0x6c>
     ba4:	e28a0c19 	add	r0, r10, #6400	; 0x1900
     ba8:	e2800012 	add	r0, r0, #18
int currentColour,currentOpacity,currentTool;
static int dfsLimit = 4000; // Maximum dfs limit
int dfsCount;

// Sets up the canvas
void setup_screen()
     bac:	e28aacfa 	add	r10, r10, #64000	; 0xfa00
     bb0:	e28aa012 	add	r10, r10, #18
     bb4:	e3a0c000 	mov	r12, #0
     bb8:	e3a0800a 	mov	r8, #10
	// Each colour will be 5x5 in size and will get a 9x9 dark grey border if selected
	for(int i=0; i<9; i++) {
		// Draw colour
		for(int x=4; x<9; x++) {
			for(int y=10*(i+1); y<10*(i+1)+5; y++) {
				canvas[y][x] = palatte[i];
     bbc:	e3016920 	movw	r6, #6432	; 0x1920
     bc0:	e3406000 	movt	r6, #0
     bc4:	e1a0700c 	mov	r7, r12
     bc8:	ea000011 	b	c14 <setup_screen+0xb4>
static int dfsLimit = 4000; // Maximum dfs limit
int dfsCount;

// Sets up the canvas
void setup_screen()
{
     bcc:	e1a03000 	mov	r3, r0
     bd0:	eaffffec 	b	b88 <setup_screen+0x28>
	// Draw the colour palatte
	// Each colour will be 5x5 in size and will get a 9x9 dark grey border if selected
	for(int i=0; i<9; i++) {
		// Draw colour
		for(int x=4; x<9; x++) {
			for(int y=10*(i+1); y<10*(i+1)+5; y++) {
     bd4:	e1550004 	cmp	r5, r4
     bd8:	aa000005 	bge	bf4 <setup_screen+0x94>
				canvas[y][x] = palatte[i];
     bdc:	e19c10b6 	ldrh	r1, [r12, r6]
     be0:	e1a03007 	mov	r3, r7
     be4:	e18210b3 	strh	r1, [r2, r3]
     be8:	e2833d0a 	add	r3, r3, #640	; 0x280
	// Draw the colour palatte
	// Each colour will be 5x5 in size and will get a 9x9 dark grey border if selected
	for(int i=0; i<9; i++) {
		// Draw colour
		for(int x=4; x<9; x++) {
			for(int y=10*(i+1); y<10*(i+1)+5; y++) {
     bec:	e3530d32 	cmp	r3, #3200	; 0xc80
     bf0:	1afffffb 	bne	be4 <setup_screen+0x84>
     bf4:	e2822002 	add	r2, r2, #2
	
	// Draw the colour palatte
	// Each colour will be 5x5 in size and will get a 9x9 dark grey border if selected
	for(int i=0; i<9; i++) {
		// Draw colour
		for(int x=4; x<9; x++) {
     bf8:	e1520000 	cmp	r2, r0
     bfc:	1afffff4 	bne	bd4 <setup_screen+0x74>
     c00:	e2800c19 	add	r0, r0, #6400	; 0x1900
     c04:	e288800a 	add	r8, r8, #10
     c08:	e28cc002 	add	r12, r12, #2
		}
	}
	
	// Draw the colour palatte
	// Each colour will be 5x5 in size and will get a 9x9 dark grey border if selected
	for(int i=0; i<9; i++) {
     c0c:	e150000a 	cmp	r0, r10
     c10:	0a000003 	beq	c24 <setup_screen+0xc4>
		// Draw colour
		for(int x=4; x<9; x++) {
			for(int y=10*(i+1); y<10*(i+1)+5; y++) {
     c14:	e1a05008 	mov	r5, r8
int currentColour,currentOpacity,currentTool;
static int dfsLimit = 4000; // Maximum dfs limit
int dfsCount;

// Sets up the canvas
void setup_screen()
     c18:	e2884005 	add	r4, r8, #5
     c1c:	e240200a 	sub	r2, r0, #10
     c20:	eaffffeb 	b	bd4 <setup_screen+0x74>
	for(int dxy=-2; dxy<=2; dxy++) {
		// Cursor - black crosshair
		canvas[135][6+dxy] = 0x0000;
		canvas[135+dxy][6] = 0x0000;
		// Fill - Crosshair that is the current colour and overlaid w an X
		canvas[145][6+dxy] = palatte[currentColour];
     c24:	e3013920 	movw	r3, #6432	; 0x1920
     c28:	e3403000 	movt	r3, #0
     c2c:	e30725a4 	movw	r2, #30116	; 0x75a4
     c30:	e3402002 	movt	r2, #2
     c34:	e5922004 	ldr	r2, [r2, #4]
     c38:	e1a02082 	lsl	r2, r2, #1
     c3c:	e193c0b2 	ldrh	r12, [r3, r2]
     c40:	e3a00000 	mov	r0, #0
     c44:	e1a03000 	mov	r3, r0
     c48:	e1a04000 	mov	r4, r0
     c4c:	e1a01000 	mov	r1, r0
int currentColour,currentOpacity,currentTool;
static int dfsLimit = 4000; // Maximum dfs limit
int dfsCount;

// Sets up the canvas
void setup_screen()
     c50:	e3012da4 	movw	r2, #7588	; 0x1da4
     c54:	e3402000 	movt	r2, #0
	}
	
	// Draw the tools
	for(int dxy=-2; dxy<=2; dxy++) {
		// Cursor - black crosshair
		canvas[135][6+dxy] = 0x0000;
     c58:	e1a07000 	mov	r7, r0
int currentColour,currentOpacity,currentTool;
static int dfsLimit = 4000; // Maximum dfs limit
int dfsCount;

// Sets up the canvas
void setup_screen()
     c5c:	e0816002 	add	r6, r1, r2
     c60:	e2865a15 	add	r5, r6, #86016	; 0x15000
     c64:	e2855f62 	add	r5, r5, #392	; 0x188
	}
	
	// Draw the tools
	for(int dxy=-2; dxy<=2; dxy++) {
		// Cursor - black crosshair
		canvas[135][6+dxy] = 0x0000;
     c68:	e1c570b0 	strh	r7, [r5]
int currentColour,currentOpacity,currentTool;
static int dfsLimit = 4000; // Maximum dfs limit
int dfsCount;

// Sets up the canvas
void setup_screen()
     c6c:	e0845002 	add	r5, r4, r2
     c70:	e2858b53 	add	r8, r5, #84992	; 0x14c00
	
	// Draw the tools
	for(int dxy=-2; dxy<=2; dxy++) {
		// Cursor - black crosshair
		canvas[135][6+dxy] = 0x0000;
		canvas[135+dxy][6] = 0x0000;
     c74:	e1c878bc 	strh	r7, [r8, #140]	; 0x8c
int currentColour,currentOpacity,currentTool;
static int dfsLimit = 4000; // Maximum dfs limit
int dfsCount;

// Sets up the canvas
void setup_screen()
     c78:	e2866b5a 	add	r6, r6, #92160	; 0x16800
     c7c:	e2866fa2 	add	r6, r6, #648	; 0x288
	for(int dxy=-2; dxy<=2; dxy++) {
		// Cursor - black crosshair
		canvas[135][6+dxy] = 0x0000;
		canvas[135+dxy][6] = 0x0000;
		// Fill - Crosshair that is the current colour and overlaid w an X
		canvas[145][6+dxy] = palatte[currentColour];
     c80:	e1c6c0b0 	strh	r12, [r6]
int currentColour,currentOpacity,currentTool;
static int dfsLimit = 4000; // Maximum dfs limit
int dfsCount;

// Sets up the canvas
void setup_screen()
     c84:	e2855b59 	add	r5, r5, #91136	; 0x16400
     c88:	e2855f63 	add	r5, r5, #396	; 0x18c
		// Cursor - black crosshair
		canvas[135][6+dxy] = 0x0000;
		canvas[135+dxy][6] = 0x0000;
		// Fill - Crosshair that is the current colour and overlaid w an X
		canvas[145][6+dxy] = palatte[currentColour];
		canvas[145+dxy][6] = palatte[currentColour];
     c8c:	e1c5c0b0 	strh	r12, [r5]
int currentColour,currentOpacity,currentTool;
static int dfsLimit = 4000; // Maximum dfs limit
int dfsCount;

// Sets up the canvas
void setup_screen()
     c90:	e0835002 	add	r5, r3, r2
     c94:	e2855b59 	add	r5, r5, #91136	; 0x16400
     c98:	e2855f62 	add	r5, r5, #392	; 0x188
		canvas[135][6+dxy] = 0x0000;
		canvas[135+dxy][6] = 0x0000;
		// Fill - Crosshair that is the current colour and overlaid w an X
		canvas[145][6+dxy] = palatte[currentColour];
		canvas[145+dxy][6] = palatte[currentColour];
		canvas[145+dxy][6+dxy] = palatte[currentColour];
     c9c:	e1c5c0b0 	strh	r12, [r5]
int currentColour,currentOpacity,currentTool;
static int dfsLimit = 4000; // Maximum dfs limit
int dfsCount;

// Sets up the canvas
void setup_screen()
     ca0:	e0805002 	add	r5, r0, r2
     ca4:	e2855b5b 	add	r5, r5, #93184	; 0x16c00
     ca8:	e2855fe2 	add	r5, r5, #904	; 0x388
		canvas[135+dxy][6] = 0x0000;
		// Fill - Crosshair that is the current colour and overlaid w an X
		canvas[145][6+dxy] = palatte[currentColour];
		canvas[145+dxy][6] = palatte[currentColour];
		canvas[145+dxy][6+dxy] = palatte[currentColour];
		canvas[145-dxy][6+dxy] = palatte[currentColour];
     cac:	e1c5c0b0 	strh	r12, [r5]
     cb0:	e2811002 	add	r1, r1, #2
     cb4:	e2844d0a 	add	r4, r4, #640	; 0x280
     cb8:	e2833d0a 	add	r3, r3, #640	; 0x280
     cbc:	e2833002 	add	r3, r3, #2
     cc0:	e2400f9f 	sub	r0, r0, #636	; 0x27c
     cc4:	e2400002 	sub	r0, r0, #2
			}
		}
	}
	
	// Draw the tools
	for(int dxy=-2; dxy<=2; dxy++) {
     cc8:	e351000a 	cmp	r1, #10
     ccc:	1affffe2 	bne	c5c <setup_screen+0xfc>
		canvas[145+dxy][6] = palatte[currentColour];
		canvas[145+dxy][6+dxy] = palatte[currentColour];
		canvas[145-dxy][6+dxy] = palatte[currentColour];
	} 
	// Centers are grey
	canvas[135][6] = canvas[145][6] = 0xBDF7;
     cd0:	e3013da4 	movw	r3, #7588	; 0x1da4
     cd4:	e3403000 	movt	r3, #0
     cd8:	e3061a8c 	movw	r1, #27276	; 0x6a8c
     cdc:	e3401001 	movt	r1, #1
     ce0:	e30b2df7 	movw	r2, #48631	; 0xbdf7
     ce4:	e34f2fff 	movt	r2, #65535	; 0xffff
     ce8:	e18320b1 	strh	r2, [r3, r1]
     cec:	e305118c 	movw	r1, #20876	; 0x518c
     cf0:	e3401001 	movt	r1, #1
     cf4:	e18320b1 	strh	r2, [r3, r1]
			}
		}
		// Draw overlay square
		for(int x=5; x<9; x++) {
			for(int y=TOOLBAR_HEIGHT-14-10*i; y<TOOLBAR_HEIGHT-10-10*i; y++) {
				canvas[y][x] = getColourAfterOpacity(palatte[currentColour],canvas[y][x],i);
     cf8:	e30735a4 	movw	r3, #30116	; 0x75a4
     cfc:	e3403002 	movt	r3, #2
     d00:	e5932004 	ldr	r2, [r3, #4]
     d04:	e3a0a0d8 	mov	r10, #216	; 0xd8
	// Centers are grey
	canvas[135][6] = canvas[145][6] = 0xBDF7;
	
	// Draw the opacity settings
	// Icon will be a 4x4 square with the current colour overlaid on top of a 4x4 white square
	for(int i=1; i<=4; i++) {
     d08:	e3a06001 	mov	r6, #1
int currentColour,currentOpacity,currentTool;
static int dfsLimit = 4000; // Maximum dfs limit
int dfsCount;

// Sets up the canvas
void setup_screen()
     d0c:	e301bda4 	movw	r11, #7588	; 0x1da4
     d10:	e340b000 	movt	r11, #0
	// Icon will be a 4x4 square with the current colour overlaid on top of a 4x4 white square
	for(int i=1; i<=4; i++) {
		// Draw base white square
		for(int x=4; x<8; x++) {
			for(int y=TOOLBAR_HEIGHT-15-10*i; y<TOOLBAR_HEIGHT-11-10*i; y++) {
				canvas[y][x] = 0xFFFF;
     d14:	e3e09000 	mvn	r9, #0
			}
		}
		// Draw overlay square
		for(int x=5; x<9; x++) {
			for(int y=TOOLBAR_HEIGHT-14-10*i; y<TOOLBAR_HEIGHT-10-10*i; y++) {
				canvas[y][x] = getColourAfterOpacity(palatte[currentColour],canvas[y][x],i);
     d18:	e3013920 	movw	r3, #6432	; 0x1920
     d1c:	e3403000 	movt	r3, #0
     d20:	e0833082 	add	r3, r3, r2, lsl #1
     d24:	e58d3008 	str	r3, [sp, #8]
     d28:	ea00002e 	b	de8 <setup_screen+0x288>
	// Draw the opacity settings
	// Icon will be a 4x4 square with the current colour overlaid on top of a 4x4 white square
	for(int i=1; i<=4; i++) {
		// Draw base white square
		for(int x=4; x<8; x++) {
			for(int y=TOOLBAR_HEIGHT-15-10*i; y<TOOLBAR_HEIGHT-11-10*i; y++) {
     d2c:	e151000c 	cmp	r1, r12
     d30:	aa000007 	bge	d54 <setup_screen+0x1f4>
				canvas[y][x] = 0xFFFF;
     d34:	e0840002 	add	r0, r4, r2
     d38:	e1a00080 	lsl	r0, r0, #1
     d3c:	e18b90b0 	strh	r9, [r11, r0]
     d40:	e1c390b0 	strh	r9, [r3]
int currentColour,currentOpacity,currentTool;
static int dfsLimit = 4000; // Maximum dfs limit
int dfsCount;

// Sets up the canvas
void setup_screen()
     d44:	e2830d0a 	add	r0, r3, #640	; 0x280
	// Icon will be a 4x4 square with the current colour overlaid on top of a 4x4 white square
	for(int i=1; i<=4; i++) {
		// Draw base white square
		for(int x=4; x<8; x++) {
			for(int y=TOOLBAR_HEIGHT-15-10*i; y<TOOLBAR_HEIGHT-11-10*i; y++) {
				canvas[y][x] = 0xFFFF;
     d48:	e1c090b0 	strh	r9, [r0]
int currentColour,currentOpacity,currentTool;
static int dfsLimit = 4000; // Maximum dfs limit
int dfsCount;

// Sets up the canvas
void setup_screen()
     d4c:	e2830c05 	add	r0, r3, #1280	; 0x500
	// Icon will be a 4x4 square with the current colour overlaid on top of a 4x4 white square
	for(int i=1; i<=4; i++) {
		// Draw base white square
		for(int x=4; x<8; x++) {
			for(int y=TOOLBAR_HEIGHT-15-10*i; y<TOOLBAR_HEIGHT-11-10*i; y++) {
				canvas[y][x] = 0xFFFF;
     d50:	e1c090b0 	strh	r9, [r0]
	
	// Draw the opacity settings
	// Icon will be a 4x4 square with the current colour overlaid on top of a 4x4 white square
	for(int i=1; i<=4; i++) {
		// Draw base white square
		for(int x=4; x<8; x++) {
     d54:	e2822001 	add	r2, r2, #1
     d58:	e2833002 	add	r3, r3, #2
     d5c:	e3520008 	cmp	r2, #8
     d60:	1afffff1 	bne	d2c <setup_screen+0x1cc>
int currentColour,currentOpacity,currentTool;
static int dfsLimit = 4000; // Maximum dfs limit
int dfsCount;

// Sets up the canvas
void setup_screen()
     d64:	e28a4004 	add	r4, r10, #4
     d68:	e3a08005 	mov	r8, #5
     d6c:	e59d1000 	ldr	r1, [sp]
     d70:	e0813101 	add	r3, r1, r1, lsl #2
     d74:	e1a03303 	lsl	r3, r3, #6
     d78:	e58d3004 	str	r3, [sp, #4]
     d7c:	e58da00c 	str	r10, [sp, #12]
     d80:	e1a0a004 	mov	r10, r4
				canvas[y][x] = 0xFFFF;
			}
		}
		// Draw overlay square
		for(int x=5; x<9; x++) {
			for(int y=TOOLBAR_HEIGHT-14-10*i; y<TOOLBAR_HEIGHT-10-10*i; y++) {
     d84:	e59d2000 	ldr	r2, [sp]
     d88:	e15a0002 	cmp	r10, r2
     d8c:	da00000d 	ble	dc8 <setup_screen+0x268>
int currentColour,currentOpacity,currentTool;
static int dfsLimit = 4000; // Maximum dfs limit
int dfsCount;

// Sets up the canvas
void setup_screen()
     d90:	e59d3004 	ldr	r3, [sp, #4]
     d94:	e0834008 	add	r4, r3, r8
     d98:	e08b4084 	add	r4, r11, r4, lsl #1
     d9c:	e3a05004 	mov	r5, #4
			}
		}
		// Draw overlay square
		for(int x=5; x<9; x++) {
			for(int y=TOOLBAR_HEIGHT-14-10*i; y<TOOLBAR_HEIGHT-10-10*i; y++) {
				canvas[y][x] = getColourAfterOpacity(palatte[currentColour],canvas[y][x],i);
     da0:	e59d1008 	ldr	r1, [sp, #8]
     da4:	e1d170f0 	ldrsh	r7, [r1]
     da8:	e1a00007 	mov	r0, r7
     dac:	e1d410f0 	ldrsh	r1, [r4]
     db0:	e1a02006 	mov	r2, r6
     db4:	ebfffedc 	bl	92c <getColourAfterOpacity>
     db8:	e1c400b0 	strh	r0, [r4]
     dbc:	e2844d0a 	add	r4, r4, #640	; 0x280
				canvas[y][x] = 0xFFFF;
			}
		}
		// Draw overlay square
		for(int x=5; x<9; x++) {
			for(int y=TOOLBAR_HEIGHT-14-10*i; y<TOOLBAR_HEIGHT-10-10*i; y++) {
     dc0:	e2555001 	subs	r5, r5, #1
     dc4:	1afffff7 	bne	da8 <setup_screen+0x248>
			for(int y=TOOLBAR_HEIGHT-15-10*i; y<TOOLBAR_HEIGHT-11-10*i; y++) {
				canvas[y][x] = 0xFFFF;
			}
		}
		// Draw overlay square
		for(int x=5; x<9; x++) {
     dc8:	e2888001 	add	r8, r8, #1
     dcc:	e3580009 	cmp	r8, #9
     dd0:	1affffeb 	bne	d84 <setup_screen+0x224>
     dd4:	e59da00c 	ldr	r10, [sp, #12]
	// Centers are grey
	canvas[135][6] = canvas[145][6] = 0xBDF7;
	
	// Draw the opacity settings
	// Icon will be a 4x4 square with the current colour overlaid on top of a 4x4 white square
	for(int i=1; i<=4; i++) {
     dd8:	e2866001 	add	r6, r6, #1
     ddc:	e24aa00a 	sub	r10, r10, #10
     de0:	e3560005 	cmp	r6, #5
     de4:	0a000009 	beq	e10 <setup_screen+0x2b0>
int currentColour,currentOpacity,currentTool;
static int dfsLimit = 4000; // Maximum dfs limit
int dfsCount;

// Sets up the canvas
void setup_screen()
     de8:	e24a1001 	sub	r1, r10, #1
     dec:	e28ac003 	add	r12, r10, #3
	// Icon will be a 4x4 square with the current colour overlaid on top of a 4x4 white square
	for(int i=1; i<=4; i++) {
		// Draw base white square
		for(int x=4; x<8; x++) {
			for(int y=TOOLBAR_HEIGHT-15-10*i; y<TOOLBAR_HEIGHT-11-10*i; y++) {
				canvas[y][x] = 0xFFFF;
     df0:	e58da000 	str	r10, [sp]
int currentColour,currentOpacity,currentTool;
static int dfsLimit = 4000; // Maximum dfs limit
int dfsCount;

// Sets up the canvas
void setup_screen()
     df4:	e08a310a 	add	r3, r10, r10, lsl #2
     df8:	e08b3383 	add	r3, r11, r3, lsl #7
     dfc:	e2833008 	add	r3, r3, #8
     e00:	e3a02004 	mov	r2, #4
	// Icon will be a 4x4 square with the current colour overlaid on top of a 4x4 white square
	for(int i=1; i<=4; i++) {
		// Draw base white square
		for(int x=4; x<8; x++) {
			for(int y=TOOLBAR_HEIGHT-15-10*i; y<TOOLBAR_HEIGHT-11-10*i; y++) {
				canvas[y][x] = 0xFFFF;
     e04:	e0814101 	add	r4, r1, r1, lsl #2
     e08:	e1a04304 	lsl	r4, r4, #6
     e0c:	eaffffc6 	b	d2c <setup_screen+0x1cc>
	}
	
	// Draw the clear screen 'button'
	// Which is just a 5x5 red X
	for(int i=0; i<5; i++) {
		canvas[TOOLBAR_HEIGHT-15+i][4+i] = 0xF800;
     e10:	e3013da4 	movw	r3, #7588	; 0x1da4
     e14:	e3403000 	movt	r3, #0
     e18:	e3031288 	movw	r1, #12936	; 0x3288
     e1c:	e3401002 	movt	r1, #2
     e20:	e3a02b3e 	mov	r2, #63488	; 0xf800
     e24:	e18320b1 	strh	r2, [r3, r1]
		canvas[TOOLBAR_HEIGHT-15+i][8-i] = 0xF800;
     e28:	e3031290 	movw	r1, #12944	; 0x3290
     e2c:	e3401002 	movt	r1, #2
     e30:	e18320b1 	strh	r2, [r3, r1]
	}
	
	// Draw the clear screen 'button'
	// Which is just a 5x5 red X
	for(int i=0; i<5; i++) {
		canvas[TOOLBAR_HEIGHT-15+i][4+i] = 0xF800;
     e34:	e303150a 	movw	r1, #13578	; 0x350a
     e38:	e3401002 	movt	r1, #2
     e3c:	e18320b1 	strh	r2, [r3, r1]
		canvas[TOOLBAR_HEIGHT-15+i][8-i] = 0xF800;
     e40:	e303150e 	movw	r1, #13582	; 0x350e
     e44:	e3401002 	movt	r1, #2
     e48:	e18320b1 	strh	r2, [r3, r1]
     e4c:	e303178c 	movw	r1, #14220	; 0x378c
     e50:	e3401002 	movt	r1, #2
     e54:	e18320b1 	strh	r2, [r3, r1]
	}
	
	// Draw the clear screen 'button'
	// Which is just a 5x5 red X
	for(int i=0; i<5; i++) {
		canvas[TOOLBAR_HEIGHT-15+i][4+i] = 0xF800;
     e58:	e3031a0e 	movw	r1, #14862	; 0x3a0e
     e5c:	e3401002 	movt	r1, #2
     e60:	e18320b1 	strh	r2, [r3, r1]
		canvas[TOOLBAR_HEIGHT-15+i][8-i] = 0xF800;
     e64:	e3031a0a 	movw	r1, #14858	; 0x3a0a
     e68:	e3401002 	movt	r1, #2
     e6c:	e18320b1 	strh	r2, [r3, r1]
	}
	
	// Draw the clear screen 'button'
	// Which is just a 5x5 red X
	for(int i=0; i<5; i++) {
		canvas[TOOLBAR_HEIGHT-15+i][4+i] = 0xF800;
     e70:	e3031c90 	movw	r1, #15504	; 0x3c90
     e74:	e3401002 	movt	r1, #2
     e78:	e18320b1 	strh	r2, [r3, r1]
		canvas[TOOLBAR_HEIGHT-15+i][8-i] = 0xF800;
     e7c:	e3031c88 	movw	r1, #15496	; 0x3c88
     e80:	e3401002 	movt	r1, #2
     e84:	e18320b1 	strh	r2, [r3, r1]
	}
}
     e88:	e28dd014 	add	sp, sp, #20
     e8c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000e90 <toolbar_selection>:
}

// Parses an initial left click to select something on the toolbar
// Can stop after finidng a button that bas been clicked
void toolbar_selection()
{
     e90:	e92d4008 	push	{r3, lr}
	// Colour selection, just loop through where each colour would be and check
	// if the click is within bounds (colours are 5x5 but bounds will be 7x7)
	for(int i=0; i<9; i++) {
		// Check boundaries
		if(mouseX>=3 && mouseX<=9 && mouseY>=10*(i+1)-1 && mouseY<=10*(i+1)+5) {
     e94:	e3013d8c 	movw	r3, #7564	; 0x1d8c
     e98:	e3403000 	movt	r3, #0
     e9c:	e5931000 	ldr	r1, [r3]
     ea0:	e2411003 	sub	r1, r1, #3
     ea4:	e3013d94 	movw	r3, #7572	; 0x1d94
     ea8:	e3403000 	movt	r3, #0
     eac:	e5930000 	ldr	r0, [r3]
     eb0:	e3a02009 	mov	r2, #9
// Can stop after finidng a button that bas been clicked
void toolbar_selection()
{
	// Colour selection, just loop through where each colour would be and check
	// if the click is within bounds (colours are 5x5 but bounds will be 7x7)
	for(int i=0; i<9; i++) {
     eb4:	e3a03000 	mov	r3, #0
		// Check boundaries
		if(mouseX>=3 && mouseX<=9 && mouseY>=10*(i+1)-1 && mouseY<=10*(i+1)+5) {
     eb8:	e3510006 	cmp	r1, #6
     ebc:	8a000009 	bhi	ee8 <toolbar_selection+0x58>
     ec0:	e1500002 	cmp	r0, r2
     ec4:	ba000007 	blt	ee8 <toolbar_selection+0x58>
	*y = temp;
}

// Parses an initial left click to select something on the toolbar
// Can stop after finidng a button that bas been clicked
void toolbar_selection()
     ec8:	e282c006 	add	r12, r2, #6
{
	// Colour selection, just loop through where each colour would be and check
	// if the click is within bounds (colours are 5x5 but bounds will be 7x7)
	for(int i=0; i<9; i++) {
		// Check boundaries
		if(mouseX>=3 && mouseX<=9 && mouseY>=10*(i+1)-1 && mouseY<=10*(i+1)+5) {
     ecc:	e150000c 	cmp	r0, r12
     ed0:	ca000004 	bgt	ee8 <toolbar_selection+0x58>
			currentColour = i;
     ed4:	e30725a4 	movw	r2, #30116	; 0x75a4
     ed8:	e3402002 	movt	r2, #2
     edc:	e5823004 	str	r3, [r2, #4]
			setup_screen(); // Update toolbar (to show selected colour for opacity buttons)
     ee0:	ebffff1e 	bl	b60 <setup_screen>
			return; // Stop
     ee4:	e8bd8008 	pop	{r3, pc}
// Can stop after finidng a button that bas been clicked
void toolbar_selection()
{
	// Colour selection, just loop through where each colour would be and check
	// if the click is within bounds (colours are 5x5 but bounds will be 7x7)
	for(int i=0; i<9; i++) {
     ee8:	e2833001 	add	r3, r3, #1
     eec:	e282200a 	add	r2, r2, #10
     ef0:	e3530009 	cmp	r3, #9
     ef4:	1affffef 	bne	eb8 <toolbar_selection+0x28>
	}
	
	// Check if tools are beign clicked
	for(int i=0; i<2; i++) {
		// Check boundaries
		if(mouseX>=3 && mouseX<=9 && mouseY>=132+10*i && mouseY<=138+10*i) {
     ef8:	e3510006 	cmp	r1, #6
     efc:	8a00000d 	bhi	f38 <toolbar_selection+0xa8>
     f00:	e3500083 	cmp	r0, #131	; 0x83
     f04:	da00002a 	ble	fb4 <toolbar_selection+0x124>
     f08:	e350008a 	cmp	r0, #138	; 0x8a
     f0c:	ca000028 	bgt	fb4 <toolbar_selection+0x124>
     f10:	ea000003 	b	f24 <toolbar_selection+0x94>
     f14:	e3500094 	cmp	r0, #148	; 0x94
     f18:	d3a02001 	movle	r2, #1
     f1c:	da000001 	ble	f28 <toolbar_selection+0x98>
     f20:	ea000007 	b	f44 <toolbar_selection+0xb4>
     f24:	e3a02000 	mov	r2, #0
			currentTool = i;
     f28:	e30735a4 	movw	r3, #30116	; 0x75a4
     f2c:	e3403002 	movt	r3, #2
     f30:	e5832000 	str	r2, [r3]
			return;
     f34:	e8bd8008 	pop	{r3, pc}
	}
	
	// Check if tools are beign clicked
	for(int i=0; i<2; i++) {
		// Check boundaries
		if(mouseX>=3 && mouseX<=9 && mouseY>=132+10*i && mouseY<=138+10*i) {
     f38:	e3a020d6 	mov	r2, #214	; 0xd6
     f3c:	e3a03001 	mov	r3, #1
     f40:	ea000001 	b	f4c <toolbar_selection+0xbc>
     f44:	e3a020d6 	mov	r2, #214	; 0xd6
     f48:	e3a03001 	mov	r3, #1
	}
	
	// Check if the opacity buttons are being clicked
	for(int i=1; i<=4; i++) {
		// Check boundaries
		if(mouseX>=3 && mouseX<=9 && mouseY>=TOOLBAR_HEIGHT-16-10*i && mouseY<=TOOLBAR_HEIGHT-10-10*i) {
     f4c:	e3510006 	cmp	r1, #6
     f50:	8a000008 	bhi	f78 <toolbar_selection+0xe8>
     f54:	e1500002 	cmp	r0, r2
     f58:	ba000006 	blt	f78 <toolbar_selection+0xe8>
	*y = temp;
}

// Parses an initial left click to select something on the toolbar
// Can stop after finidng a button that bas been clicked
void toolbar_selection()
     f5c:	e282c006 	add	r12, r2, #6
	}
	
	// Check if the opacity buttons are being clicked
	for(int i=1; i<=4; i++) {
		// Check boundaries
		if(mouseX>=3 && mouseX<=9 && mouseY>=TOOLBAR_HEIGHT-16-10*i && mouseY<=TOOLBAR_HEIGHT-10-10*i) {
     f60:	e150000c 	cmp	r0, r12
     f64:	ca000003 	bgt	f78 <toolbar_selection+0xe8>
			currentOpacity = i;
     f68:	e30725a4 	movw	r2, #30116	; 0x75a4
     f6c:	e3402002 	movt	r2, #2
     f70:	e5823008 	str	r3, [r2, #8]
			return;
     f74:	e8bd8008 	pop	{r3, pc}
			return;
		}
	}
	
	// Check if the opacity buttons are being clicked
	for(int i=1; i<=4; i++) {
     f78:	e2833001 	add	r3, r3, #1
     f7c:	e242200a 	sub	r2, r2, #10
     f80:	e3530005 	cmp	r3, #5
     f84:	1afffff0 	bne	f4c <toolbar_selection+0xbc>
			return;
		}
	}
	
	// Check if the clear screen button is being clicked (bounds is 7x7)
	if(mouseX>=3 && mouseX <=9 && mouseY>=TOOLBAR_HEIGHT-16 && mouseY<=TOOLBAR_HEIGHT-10) {
     f88:	e3510006 	cmp	r1, #6
     f8c:	88bd8008 	pophi	{r3, pc}
     f90:	e35000df 	cmp	r0, #223	; 0xdf
     f94:	d8bd8008 	pople	{r3, pc}
     f98:	e35000e6 	cmp	r0, #230	; 0xe6
     f9c:	c8bd8008 	popgt	{r3, pc}
		clear_canvas(); // Set the canvas to its initial state
     fa0:	ebfffd2c 	bl	458 <clear_canvas>
		draw_border(2,TOOLBAR_HEIGHT-17); // Draw a border around clear button
     fa4:	e3a00002 	mov	r0, #2
     fa8:	e3a010df 	mov	r1, #223	; 0xdf
     fac:	ebfffe0c 	bl	7e4 <draw_border>
     fb0:	e8bd8008 	pop	{r3, pc}
	}
	
	// Check if tools are beign clicked
	for(int i=0; i<2; i++) {
		// Check boundaries
		if(mouseX>=3 && mouseX<=9 && mouseY>=132+10*i && mouseY<=138+10*i) {
     fb4:	e350008d 	cmp	r0, #141	; 0x8d
     fb8:	d3a020d6 	movle	r2, #214	; 0xd6
     fbc:	d3a03001 	movle	r3, #1
     fc0:	daffffe1 	ble	f4c <toolbar_selection+0xbc>
     fc4:	eaffffd2 	b	f14 <toolbar_selection+0x84>

00000fc8 <fill_colour_dfs>:
	return newColour;
}

// Uses DFS to change a region of one colour to another
void fill_colour_dfs(int x, int y, short int targetColour)
{
     fc8:	e92d4070 	push	{r4, r5, r6, lr}
     fcc:	e1a05000 	mov	r5, r0
     fd0:	e1a04001 	mov	r4, r1
	// Stop if out of bounds or reaches a square that is not the target colour
	// Also stop if it exceeds the limit (otherwise there will be a memory error)
	if(x<TOOLBAR_WIDTH || x>=SCREEN_WIDTH || y<0 || y>=SCREEN_HEIGHT || 
     fd4:	e240100d 	sub	r1, r0, #13
     fd8:	e3003132 	movw	r3, #306	; 0x132
     fdc:	e1510003 	cmp	r1, r3
     fe0:	88bd8070 	pophi	{r4, r5, r6, pc}
     fe4:	e35400ef 	cmp	r4, #239	; 0xef
     fe8:	88bd8070 	pophi	{r4, r5, r6, pc}
	   canvas[y][x]!=targetColour || dfsCount>dfsLimit) return;
     fec:	e3013da4 	movw	r3, #7588	; 0x1da4
     ff0:	e3403000 	movt	r3, #0
     ff4:	e0841104 	add	r1, r4, r4, lsl #2
     ff8:	e0801301 	add	r1, r0, r1, lsl #6
     ffc:	e1a01081 	lsl	r1, r1, #1
    1000:	e19330b1 	ldrh	r3, [r3, r1]
// Uses DFS to change a region of one colour to another
void fill_colour_dfs(int x, int y, short int targetColour)
{
	// Stop if out of bounds or reaches a square that is not the target colour
	// Also stop if it exceeds the limit (otherwise there will be a memory error)
	if(x<TOOLBAR_WIDTH || x>=SCREEN_WIDTH || y<0 || y>=SCREEN_HEIGHT || 
    1004:	e6bf1073 	sxth	r1, r3
    1008:	e1510002 	cmp	r1, r2
    100c:	18bd8070 	popne	{r4, r5, r6, pc}
	   canvas[y][x]!=targetColour || dfsCount>dfsLimit) return;
    1010:	e30725a4 	movw	r2, #30116	; 0x75a4
    1014:	e3402002 	movt	r2, #2
    1018:	e592200c 	ldr	r2, [r2, #12]
    101c:	e3520efa 	cmp	r2, #4000	; 0xfa0
    1020:	c8bd8070 	popgt	{r4, r5, r6, pc}
	
	// Update the colour
	dfsCount++; // Because DFS will cause a bunch of stuff to be pushed onto the stack
    1024:	e307c5a4 	movw	r12, #30116	; 0x75a4
    1028:	e340c002 	movt	r12, #2
    102c:	e2822001 	add	r2, r2, #1
    1030:	e58c200c 	str	r2, [r12, #12]
				// for some reason it's even worse if you use BFS and non-iterative methods
	canvas[y][x] = getColourAfterOpacity(palatte[currentColour],canvas[y][x],currentOpacity);
    1034:	e3012920 	movw	r2, #6432	; 0x1920
    1038:	e3402000 	movt	r2, #0
    103c:	e59c1004 	ldr	r1, [r12, #4]
    1040:	e1a01081 	lsl	r1, r1, #1
    1044:	e6bf6073 	sxth	r6, r3
    1048:	e19200f1 	ldrsh	r0, [r2, r1]
    104c:	e1a01006 	mov	r1, r6
    1050:	e59c2008 	ldr	r2, [r12, #8]
    1054:	ebfffe34 	bl	92c <getColourAfterOpacity>
    1058:	e3013da4 	movw	r3, #7588	; 0x1da4
    105c:	e3403000 	movt	r3, #0
    1060:	e0842104 	add	r2, r4, r4, lsl #2
    1064:	e0852302 	add	r2, r5, r2, lsl #6
    1068:	e1a02082 	lsl	r2, r2, #1
    106c:	e18300b2 	strh	r0, [r3, r2]
	
	// Continue searching
	fill_colour_dfs(x+1,y,targetColour);
    1070:	e2850001 	add	r0, r5, #1
    1074:	e1a01004 	mov	r1, r4
    1078:	e1a02006 	mov	r2, r6
    107c:	ebffffd1 	bl	fc8 <fill_colour_dfs>
	fill_colour_dfs(x-1,y,targetColour);
    1080:	e2450001 	sub	r0, r5, #1
    1084:	e1a01004 	mov	r1, r4
    1088:	e1a02006 	mov	r2, r6
    108c:	ebffffcd 	bl	fc8 <fill_colour_dfs>
	fill_colour_dfs(x,y+1,targetColour);
    1090:	e1a00005 	mov	r0, r5
    1094:	e2841001 	add	r1, r4, #1
    1098:	e1a02006 	mov	r2, r6
    109c:	ebffffc9 	bl	fc8 <fill_colour_dfs>
	fill_colour_dfs(x,y-1,targetColour);
    10a0:	e1a00005 	mov	r0, r5
    10a4:	e2441001 	sub	r1, r4, #1
    10a8:	e1a02006 	mov	r2, r6
    10ac:	ebffffc5 	bl	fc8 <fill_colour_dfs>
    10b0:	e8bd8070 	pop	{r4, r5, r6, pc}

000010b4 <fill_colour>:
	}
}

// Paint bucket tool
void fill_colour()
{
    10b4:	e92d4008 	push	{r3, lr}
	// If the picked colour is the same as the canvas colour, do nothing
	if(canvas[mouseY][mouseX]==palatte[currentColour]) return;
    10b8:	e3013d94 	movw	r3, #7572	; 0x1d94
    10bc:	e3403000 	movt	r3, #0
    10c0:	e5931000 	ldr	r1, [r3]
    10c4:	e3013d8c 	movw	r3, #7564	; 0x1d8c
    10c8:	e3403000 	movt	r3, #0
    10cc:	e5930000 	ldr	r0, [r3]
    10d0:	e3013da4 	movw	r3, #7588	; 0x1da4
    10d4:	e3403000 	movt	r3, #0
    10d8:	e0812101 	add	r2, r1, r1, lsl #2
    10dc:	e0802302 	add	r2, r0, r2, lsl #6
    10e0:	e1a02082 	lsl	r2, r2, #1
    10e4:	e19320b2 	ldrh	r2, [r3, r2]
    10e8:	e3013920 	movw	r3, #6432	; 0x1920
    10ec:	e3403000 	movt	r3, #0
    10f0:	e307c5a4 	movw	r12, #30116	; 0x75a4
    10f4:	e340c002 	movt	r12, #2
    10f8:	e59cc004 	ldr	r12, [r12, #4]
    10fc:	e1a0c08c 	lsl	r12, r12, #1
    1100:	e193c0fc 	ldrsh	r12, [r3, r12]
    1104:	e6bf3072 	sxth	r3, r2
    1108:	e15c0003 	cmp	r12, r3
    110c:	08bd8008 	popeq	{r3, pc}
	// Otherwise run the DFS to fill the region of the target colour
	dfsCount = 0;
    1110:	e30735a4 	movw	r3, #30116	; 0x75a4
    1114:	e3403002 	movt	r3, #2
    1118:	e3a0c000 	mov	r12, #0
    111c:	e583c00c 	str	r12, [r3, #12]
	fill_colour_dfs(mouseX,mouseY,canvas[mouseY][mouseX]);
    1120:	e6bf2072 	sxth	r2, r2
    1124:	ebffffa7 	bl	fc8 <fill_colour_dfs>
    1128:	e8bd8008 	pop	{r3, pc}

0000112c <__cs3_reset>:
 * 2. provides code that initializes the generic interrupt controller
 */

// Define the exception handlers here 
void __attribute__ ((interrupt)) __cs3_reset (void)
{
    112c:	eafffffe 	b	112c <__cs3_reset>

00001130 <__cs3_isr_undef>:
    while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void)
{
    1130:	eafffffe 	b	1130 <__cs3_isr_undef>

00001134 <__cs3_isr_swi>:
    while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void)
{
    1134:	eafffffe 	b	1134 <__cs3_isr_swi>

00001138 <__cs3_isr_pabort>:
    while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void)
{
    1138:	eafffffe 	b	1138 <__cs3_isr_pabort>

0000113c <__cs3_isr_dabort>:
    while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void)
{
    113c:	eafffffe 	b	113c <__cs3_isr_dabort>

00001140 <__cs3_isr_irq>:
    while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_irq (void)
{
    1140:	e24ee004 	sub	lr, lr, #4
    1144:	e92d500f 	push	{r0, r1, r2, r3, r12, lr}
	// Read the ICCIAR from the processor interface 
	int address = MPCORE_GIC_CPUIF + ICCIAR; 
	int int_ID = *((int *) address); 
    1148:	e3e03a13 	mvn	r3, #77824	; 0x13000
   
	if (int_ID == PS2_IRQ)				// check if interrupt is from the PS/2
    114c:	e5133ef3 	ldr	r3, [r3, #-3827]	; 0xfffff10d
    1150:	e353004f 	cmp	r3, #79	; 0x4f
    1154:	1a000004 	bne	116c <__cs3_isr_irq+0x2c>
		PS2_ISR ();
    1158:	eb00003d 	bl	1254 <PS2_ISR>
	else
		while (1);									// if unexpected, then halt

	// Write to the End of Interrupt Register (ICCEOIR)
	address = MPCORE_GIC_CPUIF + ICCEOIR;
	*((int *) address) = int_ID;
    115c:	e3a0204f 	mov	r2, #79	; 0x4f
    1160:	e3e03a13 	mvn	r3, #77824	; 0x13000
    1164:	e5032eef 	str	r2, [r3, #-3823]	; 0xfffff111
    1168:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, r12, pc}^
    116c:	eafffffe 	b	116c <__cs3_isr_irq+0x2c>

00001170 <__cs3_isr_fiq>:

	return;
} 

void __attribute__ ((interrupt)) __cs3_isr_fiq (void)
{
    1170:	eafffffe 	b	1170 <__cs3_isr_fiq>

00001174 <set_A9_IRQ_stack>:
{
	int stack, mode;
	stack = A9_ONCHIP_END - 7;		// top of A9 onchip memory, aligned to 8 bytes
	/* change processor to IRQ mode with interrupts disabled */
	mode = INT_DISABLE | IRQ_MODE;
	__asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    1174:	e3a030d2 	mov	r3, #210	; 0xd2
    1178:	e129f003 	msr	CPSR_fc, r3
	/* set banked stack pointer */
	__asm("mov sp, %[ps]" : : [ps] "r" (stack));
    117c:	e3e03007 	mvn	r3, #7
    1180:	e1a0d003 	mov	sp, r3

	/* go back to SVC mode before executing subroutine return! */
	mode = INT_DISABLE | SVC_MODE;
	__asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    1184:	e3a030d3 	mov	r3, #211	; 0xd3
    1188:	e129f003 	msr	CPSR_fc, r3
    118c:	e12fff1e 	bx	lr

00001190 <enable_A9_interrupts>:
 * Turn on interrupts in the ARM processor
*/
void enable_A9_interrupts(void)
{
	int status = SVC_MODE | INT_ENABLE;
	__asm("msr cpsr,%[ps]" : : [ps]"r"(status));
    1190:	e3a03053 	mov	r3, #83	; 0x53
    1194:	e129f003 	msr	CPSR_fc, r3
    1198:	e12fff1e 	bx	lr

0000119c <hw_write_bits>:
	address = MPCORE_GIC_DIST + addr_offset;
	hw_write_bits((int *) address, 0x1 << (int_ID & 0x1f), value);    
}

void hw_write_bits(volatile int * addr, volatile int unmask, volatile int value)
{     
    119c:	e24dd008 	sub	sp, sp, #8
    11a0:	e58d1004 	str	r1, [sp, #4]
    11a4:	e58d2000 	str	r2, [sp]
    *addr = ((~unmask) & *addr) | value;
    11a8:	e59d1004 	ldr	r1, [sp, #4]
    11ac:	e5903000 	ldr	r3, [r0]
    11b0:	e59d2000 	ldr	r2, [sp]
    11b4:	e1c33001 	bic	r3, r3, r1
    11b8:	e1833002 	orr	r3, r3, r2
    11bc:	e5803000 	str	r3, [r0]
}
    11c0:	e28dd008 	add	sp, sp, #8
    11c4:	e12fff1e 	bx	lr

000011c8 <config_interrupt>:

/* 
 * Configure registers in the GIC for individual interrupt IDs.
*/
void config_interrupt (int int_ID, int CPU_target)
{
    11c8:	e92d4010 	push	{r4, lr}
    11cc:	e1a04000 	mov	r4, r0
	 * addr_offet = #ICDIPTR + n
	 * value = CPU_target << ((int_ID & 0x3) * 8)
	 */
	n = (int_ID >> 2) << 2;
	addr_offset = ICDIPTR + n;
	value = CPU_target << ((int_ID & 0x3) << 3);
    11d0:	e2003003 	and	r3, r0, #3
    11d4:	e1a03183 	lsl	r3, r3, #3
	/* Set Interrupt Processor Targets Register (ICDIPTRn) to cpu0. 
	 * n = integer_div(int_ID / 4) * 4
	 * addr_offet = #ICDIPTR + n
	 * value = CPU_target << ((int_ID & 0x3) * 8)
	 */
	n = (int_ID >> 2) << 2;
    11d8:	e3c00003 	bic	r0, r0, #3
	addr_offset = ICDIPTR + n;
	value = CPU_target << ((int_ID & 0x3) << 3);
    11dc:	e1a02311 	lsl	r2, r1, r3
	
	/* Now that we know the register address and value, we need to set the correct bits in 
	 * the GIC register, without changing the other bits */
	address = MPCORE_GIC_DIST + addr_offset;
	hw_write_bits((int *) address, 0xff << ((int_ID & 0x3) << 3), value);  
    11e0:	e2400b4a 	sub	r0, r0, #75776	; 0x12800
    11e4:	e3a010ff 	mov	r1, #255	; 0xff
    11e8:	e1a01311 	lsl	r1, r1, r3
    11ec:	ebffffea 	bl	119c <hw_write_bits>
	 * n = (integer_div(in_ID / 32) * 4
	 * addr_offset = 0x100 + n
	 * value = enable << (int_ID & 0x1F) */
	n = (int_ID >> 5) << 2; 
	addr_offset = ICDISER + n;
	value = 0x1 << (int_ID & 0x1f);
    11f0:	e204301f 	and	r3, r4, #31
    11f4:	e3a02001 	mov	r2, #1
    11f8:	e1a02312 	lsl	r2, r2, r3
    
	/* Set Interrupt Set-Enable Registers (ICDISERn). 
	 * n = (integer_div(in_ID / 32) * 4
	 * addr_offset = 0x100 + n
	 * value = enable << (int_ID & 0x1F) */
	n = (int_ID >> 5) << 2; 
    11fc:	e1a002c4 	asr	r0, r4, #5
    1200:	e1a00100 	lsl	r0, r0, #2
	addr_offset = ICDISER + n;
    1204:	e2800c01 	add	r0, r0, #256	; 0x100
	value = 0x1 << (int_ID & 0x1f);
	/* Now that we know the register address and value, we need to set the correct bits in 
	 * the GIC register, without changing the other bits */
	address = MPCORE_GIC_DIST + addr_offset;
	hw_write_bits((int *) address, 0x1 << (int_ID & 0x1f), value);    
    1208:	e2400a13 	sub	r0, r0, #77824	; 0x13000
    120c:	e1a01002 	mov	r1, r2
    1210:	ebffffe1 	bl	119c <hw_write_bits>
    1214:	e8bd8010 	pop	{r4, pc}

00001218 <config_GIC>:

/* 
 * Configure the Generic Interrupt Controller (GIC)
*/
void config_GIC(void)
{
    1218:	e92d4008 	push	{r3, lr}
	int address;	// used to calculate register addresses

	/* enable some examples of interrupts */
  	config_interrupt (MPCORE_PRIV_TIMER_IRQ, CPU0);
    121c:	e3a0001d 	mov	r0, #29
    1220:	e3a01001 	mov	r1, #1
    1224:	ebffffe7 	bl	11c8 <config_interrupt>
  	config_interrupt (PS2_IRQ, CPU0);
    1228:	e3a0004f 	mov	r0, #79	; 0x4f
    122c:	e3a01001 	mov	r1, #1
    1230:	ebffffe4 	bl	11c8 <config_interrupt>
    
  	// Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts for lowest priority 
	address = MPCORE_GIC_CPUIF + ICCPMR;
  	*((int *) address) = 0xFFFF;       
    1234:	e3e02a13 	mvn	r2, #77824	; 0x13000
    1238:	e30f3fff 	movw	r3, #65535	; 0xffff
    123c:	e5023efb 	str	r3, [r2, #-3835]	; 0xfffff105

  	// Set CPU Interface Control Register (ICCICR). Enable signaling of interrupts
	address = MPCORE_GIC_CPUIF + ICCICR;
	*((int *) address) = ENABLE;
    1240:	e3a03001 	mov	r3, #1
    1244:	e5023eff 	str	r3, [r2, #-3839]	; 0xfffff101

	// Configure the Distributor Control Register (ICDDCR) to send pending interrupts to CPUs 
	address = MPCORE_GIC_DIST + ICDDCR;
	*((int *) address) = ENABLE;   
    1248:	e3e02a12 	mvn	r2, #73728	; 0x12000
    124c:	e5023fff 	str	r3, [r2, #-4095]	; 0xfffff001
    1250:	e8bd8008 	pop	{r3, pc}

00001254 <PS2_ISR>:

volatile char byte1, byte2, byte3; // PS/2 variables

// Interrupt service routine for PS2 mouse
void PS2_ISR( void )
{
    1254:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
  	volatile int * PS2_ptr = (int *)PS2_BASE; // PS/2 port address
	int PS2_data, RAVAIL;
	int dx=0,dy=0;
	bool xSign,ySign;

	PS2_data = *(PS2_ptr); // read the Data register in the PS/2 port
    1258:	e3a03000 	mov	r3, #0
    125c:	e34f3f20 	movt	r3, #65312	; 0xff20
    1260:	e5932100 	ldr	r2, [r3, #256]	; 0x100
	RAVAIL = (PS2_data & 0xFFFF0000) >> 16; // extract the RAVAIL field
	if (RAVAIL > 0)
    1264:	e1b03822 	lsrs	r3, r2, #16
    1268:	0a000011 	beq	12b4 <PS2_ISR+0x60>
	{
		/* always save the last three bytes received */
		byte1 = byte2;
    126c:	e30735b4 	movw	r3, #30132	; 0x75b4
    1270:	e3403002 	movt	r3, #2
    1274:	e5d31000 	ldrb	r1, [r3]
    1278:	e5c31001 	strb	r1, [r3, #1]
		byte2 = byte3;
    127c:	e5d31002 	ldrb	r1, [r3, #2]
    1280:	e5c31000 	strb	r1, [r3]
		byte3 = PS2_data & 0xFF;
    1284:	e6ef2072 	uxtb	r2, r2
    1288:	e5c32002 	strb	r2, [r3, #2]
		if ( (byte2 == (char) 0xAA) && (byte3 == (char) 0x00) )
    128c:	e5d33000 	ldrb	r3, [r3]
    1290:	e35300aa 	cmp	r3, #170	; 0xaa
    1294:	1a000006 	bne	12b4 <PS2_ISR+0x60>
    1298:	e30735b4 	movw	r3, #30132	; 0x75b4
    129c:	e3403002 	movt	r3, #2
    12a0:	e5d33002 	ldrb	r3, [r3, #2]
    12a4:	e3530000 	cmp	r3, #0
			// mouse inserted; initialize sending of data
			*(PS2_ptr) = 0xF4;
    12a8:	034f3f20 	movteq	r3, #65312	; 0xff20
    12ac:	03a020f4 	moveq	r2, #244	; 0xf4
    12b0:	05832100 	streq	r2, [r3, #256]	; 0x100
	}
	
	// Update mouse position when all 3 bytes are read in
	if(byte1&0x08 && byte1<0xE0 && (byte1>>4)<0x0A) {
    12b4:	e30735b4 	movw	r3, #30132	; 0x75b4
    12b8:	e3403002 	movt	r3, #2
    12bc:	e5d33001 	ldrb	r3, [r3, #1]
    12c0:	e2033008 	and	r3, r3, #8
    12c4:	e6ef3073 	uxtb	r3, r3
    12c8:	e3530000 	cmp	r3, #0
    12cc:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
    12d0:	e30735b4 	movw	r3, #30132	; 0x75b4
    12d4:	e3403002 	movt	r3, #2
    12d8:	e5d33001 	ldrb	r3, [r3, #1]
    12dc:	e35300df 	cmp	r3, #223	; 0xdf
    12e0:	88bd80f8 	pophi	{r3, r4, r5, r6, r7, pc}
    12e4:	e30735b4 	movw	r3, #30132	; 0x75b4
    12e8:	e3403002 	movt	r3, #2
    12ec:	e5d33001 	ldrb	r3, [r3, #1]
    12f0:	e353009f 	cmp	r3, #159	; 0x9f
    12f4:	88bd80f8 	pophi	{r3, r4, r5, r6, r7, pc}
		// Update state of left button
		prevLeftBtn = leftBtn;
    12f8:	e3012d9c 	movw	r2, #7580	; 0x1d9c
    12fc:	e3402000 	movt	r2, #0
    1300:	e5d25000 	ldrb	r5, [r2]
    1304:	e3013d9d 	movw	r3, #7581	; 0x1d9d
    1308:	e3403000 	movt	r3, #0
    130c:	e5c35000 	strb	r5, [r3]
		leftBtn = byte1&0b1;
    1310:	e30735b4 	movw	r3, #30132	; 0x75b4
    1314:	e3403002 	movt	r3, #2
    1318:	e5d34001 	ldrb	r4, [r3, #1]
    131c:	e2044001 	and	r4, r4, #1
    1320:	e5c24000 	strb	r4, [r2]
		
		// Get x movement
		xSign = byte1 & 0b00010000;
    1324:	e5d33001 	ldrb	r3, [r3, #1]
		if(xSign) { // Negative
    1328:	e2033010 	and	r3, r3, #16
    132c:	e6ef3073 	uxtb	r3, r3
    1330:	e3530000 	cmp	r3, #0
			dx = byte2-256;
    1334:	e30735b4 	movw	r3, #30132	; 0x75b4
    1338:	e3403002 	movt	r3, #2
    133c:	e5d36000 	ldrb	r6, [r3]
    1340:	12466c01 	subne	r6, r6, #256	; 0x100
		} else {
			dx = byte2;
		}
		// Get y movement
		ySign = byte1 & 0b00100000;
    1344:	e30735b4 	movw	r3, #30132	; 0x75b4
    1348:	e3403002 	movt	r3, #2
    134c:	e5d33001 	ldrb	r3, [r3, #1]
		if(ySign) { // Negative
    1350:	e2033020 	and	r3, r3, #32
    1354:	e6ef3073 	uxtb	r3, r3
    1358:	e3530000 	cmp	r3, #0
			dy = byte3-256;
    135c:	e30735b4 	movw	r3, #30132	; 0x75b4
    1360:	e3403002 	movt	r3, #2
    1364:	e5d37002 	ldrb	r7, [r3, #2]
    1368:	12477c01 	subne	r7, r7, #256	; 0x100
		} else {
			dy = byte3;
		}
		
		// Update mouse position
		prevMouseX = mouseX;
    136c:	e3012d8c 	movw	r2, #7564	; 0x1d8c
    1370:	e3402000 	movt	r2, #0
    1374:	e5920000 	ldr	r0, [r2]
    1378:	e3013d90 	movw	r3, #7568	; 0x1d90
    137c:	e3403000 	movt	r3, #0
    1380:	e5830000 	str	r0, [r3]
		prevMouseY = mouseY;
    1384:	e3013d94 	movw	r3, #7572	; 0x1d94
    1388:	e3403000 	movt	r3, #0
    138c:	e5931000 	ldr	r1, [r3]
    1390:	e301cd98 	movw	r12, #7576	; 0x1d98
    1394:	e340c000 	movt	r12, #0
    1398:	e58c1000 	str	r1, [r12]
		mouseX += dx;
    139c:	e086c000 	add	r12, r6, r0
    13a0:	e582c000 	str	r12, [r2]
		mouseY -= dy; // y position is inverted
    13a4:	e0672001 	rsb	r2, r7, r1
    13a8:	e5832000 	str	r2, [r3]
		// Boundary checks
		if(mouseX<0) mouseX = 0;
    13ac:	e35c0000 	cmp	r12, #0
    13b0:	aa000004 	bge	13c8 <PS2_ISR+0x174>
    13b4:	e3013d8c 	movw	r3, #7564	; 0x1d8c
    13b8:	e3403000 	movt	r3, #0
    13bc:	e3a0c000 	mov	r12, #0
    13c0:	e583c000 	str	r12, [r3]
    13c4:	ea000004 	b	13dc <PS2_ISR+0x188>
		else if(mouseX>319) mouseX = 319;
    13c8:	e35c0d05 	cmp	r12, #320	; 0x140
    13cc:	a3013d8c 	movwge	r3, #7564	; 0x1d8c
    13d0:	a3403000 	movtge	r3, #0
    13d4:	a300c13f 	movwge	r12, #319	; 0x13f
    13d8:	a583c000 	strge	r12, [r3]
		if(mouseY<0) mouseY = 0;
    13dc:	e3520000 	cmp	r2, #0
    13e0:	aa000004 	bge	13f8 <PS2_ISR+0x1a4>
    13e4:	e3013d94 	movw	r3, #7572	; 0x1d94
    13e8:	e3403000 	movt	r3, #0
    13ec:	e3a02000 	mov	r2, #0
    13f0:	e5832000 	str	r2, [r3]
    13f4:	ea000004 	b	140c <PS2_ISR+0x1b8>
		else if(mouseY>239) mouseY = 239;
    13f8:	e35200ef 	cmp	r2, #239	; 0xef
    13fc:	c3013d94 	movwgt	r3, #7572	; 0x1d94
    1400:	c3403000 	movtgt	r3, #0
    1404:	c3a020ef 	movgt	r2, #239	; 0xef
    1408:	c5832000 	strgt	r2, [r3]
		
		// Draw a line if the last and current state of the left button are both true (pressed down)
		// On an initial left click (just current state is true) check if it's clicking on the toolbar
		if(prevLeftBtn && leftBtn && currentTool==0) draw_line(prevMouseX,prevMouseY,mouseX,mouseY);
    140c:	e3550000 	cmp	r5, #0
    1410:	0a00000e 	beq	1450 <PS2_ISR+0x1fc>
    1414:	e3540000 	cmp	r4, #0
    1418:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
    141c:	e30735a4 	movw	r3, #30116	; 0x75a4
    1420:	e3403002 	movt	r3, #2
    1424:	e5933000 	ldr	r3, [r3]
    1428:	e3530000 	cmp	r3, #0
    142c:	18bd80f8 	popne	{r3, r4, r5, r6, r7, pc}
    1430:	e3012d8c 	movw	r2, #7564	; 0x1d8c
    1434:	e3402000 	movt	r2, #0
    1438:	e3013d94 	movw	r3, #7572	; 0x1d94
    143c:	e3403000 	movt	r3, #0
    1440:	e5922000 	ldr	r2, [r2]
    1444:	e5933000 	ldr	r3, [r3]
    1448:	ebfffd56 	bl	9a8 <draw_line>
    144c:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
		else if(!prevLeftBtn && leftBtn) {
    1450:	e3540000 	cmp	r4, #0
    1454:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
			if(mouseX<TOOLBAR_WIDTH) toolbar_selection();
    1458:	e3013d8c 	movw	r3, #7564	; 0x1d8c
    145c:	e3403000 	movt	r3, #0
    1460:	e5933000 	ldr	r3, [r3]
    1464:	e353000c 	cmp	r3, #12
    1468:	ca000001 	bgt	1474 <PS2_ISR+0x220>
    146c:	ebfffe87 	bl	e90 <toolbar_selection>
    1470:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
			else if(currentTool==1) fill_colour();
    1474:	e30735a4 	movw	r3, #30116	; 0x75a4
    1478:	e3403002 	movt	r3, #2
    147c:	e5933000 	ldr	r3, [r3]
    1480:	e3530001 	cmp	r3, #1
    1484:	18bd80f8 	popne	{r3, r4, r5, r6, r7, pc}
    1488:	ebffff09 	bl	10b4 <fill_colour>
    148c:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

00001490 <atexit>:
    1490:	e1a01000 	mov	r1, r0
    1494:	e3a00000 	mov	r0, #0
    1498:	e92d4008 	push	{r3, lr}
    149c:	e1a02000 	mov	r2, r0
    14a0:	e1a03000 	mov	r3, r0
    14a4:	eb00000e 	bl	14e4 <__register_exitproc>
    14a8:	e8bd4008 	pop	{r3, lr}
    14ac:	e12fff1e 	bx	lr

000014b0 <exit>:
    14b0:	e92d4008 	push	{r3, lr}
    14b4:	e3a01000 	mov	r1, #0
    14b8:	e1a04000 	mov	r4, r0
    14bc:	eb000045 	bl	15d8 <__call_exitprocs>
    14c0:	e59f3018 	ldr	r3, [pc, #24]	; 14e0 <exit+0x30>
    14c4:	e5930000 	ldr	r0, [r3]
    14c8:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    14cc:	e3530000 	cmp	r3, #0
    14d0:	11a0e00f 	movne	lr, pc
    14d4:	112fff13 	bxne	r3
    14d8:	e1a00004 	mov	r0, r4
    14dc:	eb0000c9 	bl	1808 <_exit>
    14e0:	000018c0 	.word	0x000018c0

000014e4 <__register_exitproc>:
    14e4:	e59fc0e4 	ldr	r12, [pc, #228]	; 15d0 <__register_exitproc+0xec>
    14e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    14ec:	e59c4000 	ldr	r4, [r12]
    14f0:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    14f4:	e35c0000 	cmp	r12, #0
    14f8:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    14fc:	e59c5004 	ldr	r5, [r12, #4]
    1500:	0584c148 	streq	r12, [r4, #328]	; 0x148
    1504:	e355001f 	cmp	r5, #31
    1508:	e24dd010 	sub	sp, sp, #16
    150c:	e1a06000 	mov	r6, r0
    1510:	da000015 	ble	156c <__register_exitproc+0x88>
    1514:	e59f00b8 	ldr	r0, [pc, #184]	; 15d4 <__register_exitproc+0xf0>
    1518:	e3500000 	cmp	r0, #0
    151c:	1a000001 	bne	1528 <__register_exitproc+0x44>
    1520:	e3e00000 	mvn	r0, #0
    1524:	ea000018 	b	158c <__register_exitproc+0xa8>
    1528:	e3a00e19 	mov	r0, #400	; 0x190
    152c:	e58d100c 	str	r1, [sp, #12]
    1530:	e58d2008 	str	r2, [sp, #8]
    1534:	e58d3004 	str	r3, [sp, #4]
    1538:	e320f000 	nop	{0}
    153c:	e250c000 	subs	r12, r0, #0
    1540:	e59d100c 	ldr	r1, [sp, #12]
    1544:	e59d2008 	ldr	r2, [sp, #8]
    1548:	e59d3004 	ldr	r3, [sp, #4]
    154c:	0afffff3 	beq	1520 <__register_exitproc+0x3c>
    1550:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    1554:	e3a00000 	mov	r0, #0
    1558:	e58c0004 	str	r0, [r12, #4]
    155c:	e58c5000 	str	r5, [r12]
    1560:	e584c148 	str	r12, [r4, #328]	; 0x148
    1564:	e58c0188 	str	r0, [r12, #392]	; 0x188
    1568:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    156c:	e3560000 	cmp	r6, #0
    1570:	e59c4004 	ldr	r4, [r12, #4]
    1574:	1a000007 	bne	1598 <__register_exitproc+0xb4>
    1578:	e2843002 	add	r3, r4, #2
    157c:	e2844001 	add	r4, r4, #1
    1580:	e78c1103 	str	r1, [r12, r3, lsl #2]
    1584:	e58c4004 	str	r4, [r12, #4]
    1588:	e3a00000 	mov	r0, #0
    158c:	e28dd010 	add	sp, sp, #16
    1590:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    1594:	e12fff1e 	bx	lr
    1598:	e3a00001 	mov	r0, #1
    159c:	e1a00410 	lsl	r0, r0, r4
    15a0:	e08c8104 	add	r8, r12, r4, lsl #2
    15a4:	e3560002 	cmp	r6, #2
    15a8:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    15ac:	e5883108 	str	r3, [r8, #264]	; 0x108
    15b0:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    15b4:	e1877000 	orr	r7, r7, r0
    15b8:	01830000 	orreq	r0, r3, r0
    15bc:	e1a05008 	mov	r5, r8
    15c0:	e5882088 	str	r2, [r8, #136]	; 0x88
    15c4:	e58c7188 	str	r7, [r12, #392]	; 0x188
    15c8:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    15cc:	eaffffe9 	b	1578 <__register_exitproc+0x94>
    15d0:	000018c0 	.word	0x000018c0
    15d4:	00000000 	.word	0x00000000

000015d8 <__call_exitprocs>:
    15d8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    15dc:	e59f3168 	ldr	r3, [pc, #360]	; 174c <__call_exitprocs+0x174>
    15e0:	e5933000 	ldr	r3, [r3]
    15e4:	e24dd014 	sub	sp, sp, #20
    15e8:	e58d3004 	str	r3, [sp, #4]
    15ec:	e2833f52 	add	r3, r3, #328	; 0x148
    15f0:	e58d0008 	str	r0, [sp, #8]
    15f4:	e58d300c 	str	r3, [sp, #12]
    15f8:	e1a07001 	mov	r7, r1
    15fc:	e3a08001 	mov	r8, #1
    1600:	e59d3004 	ldr	r3, [sp, #4]
    1604:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    1608:	e3560000 	cmp	r6, #0
    160c:	e59db00c 	ldr	r11, [sp, #12]
    1610:	0a000033 	beq	16e4 <__call_exitprocs+0x10c>
    1614:	e5965004 	ldr	r5, [r6, #4]
    1618:	e2554001 	subs	r4, r5, #1
    161c:	5286a088 	addpl	r10, r6, #136	; 0x88
    1620:	5285501f 	addpl	r5, r5, #31
    1624:	508a5105 	addpl	r5, r10, r5, lsl #2
    1628:	5a000007 	bpl	164c <__call_exitprocs+0x74>
    162c:	ea000029 	b	16d8 <__call_exitprocs+0x100>
    1630:	e5953000 	ldr	r3, [r5]
    1634:	e1530007 	cmp	r3, r7
    1638:	0a000005 	beq	1654 <__call_exitprocs+0x7c>
    163c:	e2444001 	sub	r4, r4, #1
    1640:	e3740001 	cmn	r4, #1
    1644:	e2455004 	sub	r5, r5, #4
    1648:	0a000022 	beq	16d8 <__call_exitprocs+0x100>
    164c:	e3570000 	cmp	r7, #0
    1650:	1afffff6 	bne	1630 <__call_exitprocs+0x58>
    1654:	e5963004 	ldr	r3, [r6, #4]
    1658:	e06a2005 	rsb	r2, r10, r5
    165c:	e2433001 	sub	r3, r3, #1
    1660:	e0862002 	add	r2, r6, r2
    1664:	e1530004 	cmp	r3, r4
    1668:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    166c:	13a01000 	movne	r1, #0
    1670:	05864004 	streq	r4, [r6, #4]
    1674:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    1678:	e3530000 	cmp	r3, #0
    167c:	0affffee 	beq	163c <__call_exitprocs+0x64>
    1680:	e1a02418 	lsl	r2, r8, r4
    1684:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    1688:	e1120001 	tst	r2, r1
    168c:	e5969004 	ldr	r9, [r6, #4]
    1690:	0a000016 	beq	16f0 <__call_exitprocs+0x118>
    1694:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    1698:	e1120001 	tst	r2, r1
    169c:	1a000016 	bne	16fc <__call_exitprocs+0x124>
    16a0:	e59d0008 	ldr	r0, [sp, #8]
    16a4:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    16a8:	e1a0e00f 	mov	lr, pc
    16ac:	e12fff13 	bx	r3
    16b0:	e5963004 	ldr	r3, [r6, #4]
    16b4:	e1530009 	cmp	r3, r9
    16b8:	1affffd0 	bne	1600 <__call_exitprocs+0x28>
    16bc:	e59b3000 	ldr	r3, [r11]
    16c0:	e1530006 	cmp	r3, r6
    16c4:	1affffcd 	bne	1600 <__call_exitprocs+0x28>
    16c8:	e2444001 	sub	r4, r4, #1
    16cc:	e3740001 	cmn	r4, #1
    16d0:	e2455004 	sub	r5, r5, #4
    16d4:	1affffdc 	bne	164c <__call_exitprocs+0x74>
    16d8:	e59f1070 	ldr	r1, [pc, #112]	; 1750 <__call_exitprocs+0x178>
    16dc:	e3510000 	cmp	r1, #0
    16e0:	1a000009 	bne	170c <__call_exitprocs+0x134>
    16e4:	e28dd014 	add	sp, sp, #20
    16e8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    16ec:	e12fff1e 	bx	lr
    16f0:	e1a0e00f 	mov	lr, pc
    16f4:	e12fff13 	bx	r3
    16f8:	eaffffec 	b	16b0 <__call_exitprocs+0xd8>
    16fc:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    1700:	e1a0e00f 	mov	lr, pc
    1704:	e12fff13 	bx	r3
    1708:	eaffffe8 	b	16b0 <__call_exitprocs+0xd8>
    170c:	e5963004 	ldr	r3, [r6, #4]
    1710:	e3530000 	cmp	r3, #0
    1714:	e5963000 	ldr	r3, [r6]
    1718:	1a000008 	bne	1740 <__call_exitprocs+0x168>
    171c:	e3530000 	cmp	r3, #0
    1720:	0a000006 	beq	1740 <__call_exitprocs+0x168>
    1724:	e1a00006 	mov	r0, r6
    1728:	e58b3000 	str	r3, [r11]
    172c:	e320f000 	nop	{0}
    1730:	e59b6000 	ldr	r6, [r11]
    1734:	e3560000 	cmp	r6, #0
    1738:	1affffb5 	bne	1614 <__call_exitprocs+0x3c>
    173c:	eaffffe8 	b	16e4 <__call_exitprocs+0x10c>
    1740:	e1a0b006 	mov	r11, r6
    1744:	e1a06003 	mov	r6, r3
    1748:	eafffff9 	b	1734 <__call_exitprocs+0x15c>
    174c:	000018c0 	.word	0x000018c0
    1750:	00000000 	.word	0x00000000

00001754 <register_fini>:
    1754:	e92d4008 	push	{r3, lr}
    1758:	e59f3010 	ldr	r3, [pc, #16]	; 1770 <register_fini+0x1c>
    175c:	e3530000 	cmp	r3, #0
    1760:	159f000c 	ldrne	r0, [pc, #12]	; 1774 <register_fini+0x20>
    1764:	1bffff49 	blne	1490 <atexit>
    1768:	e8bd4008 	pop	{r3, lr}
    176c:	e12fff1e 	bx	lr
    1770:	000018e8 	.word	0x000018e8
    1774:	00001778 	.word	0x00001778

00001778 <__libc_fini_array>:
    1778:	e92d4038 	push	{r3, r4, r5, lr}
    177c:	e59f5030 	ldr	r5, [pc, #48]	; 17b4 <__libc_fini_array+0x3c>
    1780:	e59f4030 	ldr	r4, [pc, #48]	; 17b8 <__libc_fini_array+0x40>
    1784:	e0654004 	rsb	r4, r5, r4
    1788:	e1b04144 	asrs	r4, r4, #2
    178c:	10855104 	addne	r5, r5, r4, lsl #2
    1790:	0a000004 	beq	17a8 <__libc_fini_array+0x30>
    1794:	e5353004 	ldr	r3, [r5, #-4]!
    1798:	e1a0e00f 	mov	lr, pc
    179c:	e12fff13 	bx	r3
    17a0:	e2544001 	subs	r4, r4, #1
    17a4:	1afffffa 	bne	1794 <__libc_fini_array+0x1c>
    17a8:	eb00004e 	bl	18e8 <__libc_fini>
    17ac:	e8bd4038 	pop	{r3, r4, r5, lr}
    17b0:	e12fff1e 	bx	lr
    17b4:	00001900 	.word	0x00001900
    17b8:	00001904 	.word	0x00001904

000017bc <__cs3_premain>:
    17bc:	e92d4008 	push	{r3, lr}
    17c0:	eb000017 	bl	1824 <__libc_init_array>
    17c4:	e59f3030 	ldr	r3, [pc, #48]	; 17fc <__cs3_premain+0x40>
    17c8:	e3530000 	cmp	r3, #0
    17cc:	15930000 	ldrne	r0, [r3]
    17d0:	01a00003 	moveq	r0, r3
    17d4:	e59f3024 	ldr	r3, [pc, #36]	; 1800 <__cs3_premain+0x44>
    17d8:	e3530000 	cmp	r3, #0
    17dc:	15931000 	ldrne	r1, [r3]
    17e0:	01a01003 	moveq	r1, r3
    17e4:	e3a02000 	mov	r2, #0
    17e8:	ebfffad0 	bl	330 <main>
    17ec:	e59f3010 	ldr	r3, [pc, #16]	; 1804 <__cs3_premain+0x48>
    17f0:	e3530000 	cmp	r3, #0
    17f4:	1bffff2d 	blne	14b0 <exit>
    17f8:	eafffffe 	b	17f8 <__cs3_premain+0x3c>
	...
    1804:	000014b0 	.word	0x000014b0

00001808 <_exit>:
    1808:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    180c:	e3a00018 	mov	r0, #24
    1810:	e59f1004 	ldr	r1, [pc, #4]	; 181c <_exit+0x14>
    1814:	ef123456 	svc	0x00123456
    1818:	eafffffe 	b	1818 <_exit+0x10>
    181c:	00020026 	.word	0x00020026

00001820 <__cs3_isr_interrupt>:
    1820:	eafffffe 	b	1820 <__cs3_isr_interrupt>

00001824 <__libc_init_array>:
    1824:	e92d4070 	push	{r4, r5, r6, lr}
    1828:	e59f506c 	ldr	r5, [pc, #108]	; 189c <__libc_init_array+0x78>
    182c:	e59f606c 	ldr	r6, [pc, #108]	; 18a0 <__libc_init_array+0x7c>
    1830:	e0656006 	rsb	r6, r5, r6
    1834:	e1b06146 	asrs	r6, r6, #2
    1838:	12455004 	subne	r5, r5, #4
    183c:	13a04000 	movne	r4, #0
    1840:	0a000005 	beq	185c <__libc_init_array+0x38>
    1844:	e5b53004 	ldr	r3, [r5, #4]!
    1848:	e2844001 	add	r4, r4, #1
    184c:	e1a0e00f 	mov	lr, pc
    1850:	e12fff13 	bx	r3
    1854:	e1560004 	cmp	r6, r4
    1858:	1afffff9 	bne	1844 <__libc_init_array+0x20>
    185c:	e59f5040 	ldr	r5, [pc, #64]	; 18a4 <__libc_init_array+0x80>
    1860:	e59f6040 	ldr	r6, [pc, #64]	; 18a8 <__libc_init_array+0x84>
    1864:	e0656006 	rsb	r6, r5, r6
    1868:	eb000016 	bl	18c8 <_init>
    186c:	e1b06146 	asrs	r6, r6, #2
    1870:	12455004 	subne	r5, r5, #4
    1874:	13a04000 	movne	r4, #0
    1878:	0a000005 	beq	1894 <__libc_init_array+0x70>
    187c:	e5b53004 	ldr	r3, [r5, #4]!
    1880:	e2844001 	add	r4, r4, #1
    1884:	e1a0e00f 	mov	lr, pc
    1888:	e12fff13 	bx	r3
    188c:	e1560004 	cmp	r6, r4
    1890:	1afffff9 	bne	187c <__libc_init_array+0x58>
    1894:	e8bd4070 	pop	{r4, r5, r6, lr}
    1898:	e12fff1e 	bx	lr
    189c:	000018e0 	.word	0x000018e0
    18a0:	000018e0 	.word	0x000018e0
    18a4:	000018e0 	.word	0x000018e0
    18a8:	000018e8 	.word	0x000018e8

Disassembly of section .rodata:

000018b0 <_global_impure_ptr-0x10>:
    18b0:	4f5b063f 	.word	0x4f5b063f
    18b4:	077d6d66 	.word	0x077d6d66
    18b8:	7c77677f 	.word	0x7c77677f
    18bc:	71795e39 	.word	0x71795e39

000018c0 <_global_impure_ptr>:
    18c0:	00001940 00000043                       @...C...

000018c8 <_init>:
    18c8:	e1a0c00d 	mov	r12, sp
    18cc:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    18d0:	e24cb004 	sub	r11, r12, #4
    18d4:	e24bd028 	sub	sp, r11, #40	; 0x28
    18d8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    18dc:	e12fff1e 	bx	lr

000018e0 <__init_array_start>:
    18e0:	00001754 	.word	0x00001754

000018e4 <__frame_dummy_init_array_entry>:
    18e4:	00000208                                ....

000018e8 <__libc_fini>:
    18e8:	e1a0c00d 	mov	r12, sp
    18ec:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    18f0:	e24cb004 	sub	r11, r12, #4
    18f4:	e24bd028 	sub	sp, r11, #40	; 0x28
    18f8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    18fc:	e12fff1e 	bx	lr

00001900 <__fini_array_start>:
    1900:	000001c4 	.word	0x000001c4

00001904 <__cs3_regions>:
    1904:	00000000 	.word	0x00000000
    1908:	00000040 	.word	0x00000040
    190c:	00000040 	.word	0x00000040
    1910:	00001d30 	.word	0x00001d30
    1914:	00025848 	.word	0x00025848
